/* The following code was generated by JFlex 1.5.0-SNAPSHOT on 5/1/18 6:37 PM */

package de.julielab.semedico.core.services.query;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 _       __                 _             __
| |     / /___ __________  (_)___  ____ _/ /
| | /| / / __ `/ ___/ __ \/ / __ \/ __ `/ / 
| |/ |/ / /_/ / /  / / / / / / / / /_/ /_/  
|__/|__/\__,_/_/  /_/ /_/_/_/ /_/\__, (_)   
                                /____/      

The following code is auto generated.
Please change the .lex file and run jflex if you want to change it!

Your find the .lex file at
/semedico-core/src/main/java/de/julielab/semedico/core/services/query/QueryTokenizerImpl.lex
It should be compiled into
/semedico-core/src/main/java/de/julielab/semedico/core/services/query/QueryTokenizerImpl.java

by running java -jar src/main/resources/JFlex.jar.
*/
import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * on 5/1/18 6:37 PM from the specification file
 * <tt>/Users/faessler/Coding/git/semedico/semedico-core/src/main/java/de/julielab/semedico/core/services/query/QueryTokenizerImpl.lex</tt>
 */
public class QueryTokenizerImpl {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\44\1\43\1\0\1\44\1\42\22\0\1\44\1\4\1\25"+
    "\1\23\2\0\1\17\1\24\1\1\1\2\1\33\1\0\1\32\1\3"+
    "\1\32\1\32\12\35\5\0\1\33\1\0\1\13\2\34\1\16\11\34"+
    "\1\5\1\11\2\34\1\21\1\34\1\12\6\34\1\26\1\0\1\27"+
    "\1\0\1\32\1\0\1\15\2\34\1\14\11\34\1\10\1\6\2\34"+
    "\1\20\1\34\1\7\6\34\1\30\1\22\1\31\102\0\27\34\1\0"+
    "\37\34\1\0\u0568\34\12\36\206\34\12\36\u026c\34\12\36\166\34\12\36"+
    "\166\34\12\36\166\34\12\36\166\34\12\36\167\34\11\36\166\34\12\36"+
    "\166\34\12\36\166\34\12\36\340\34\12\36\166\34\12\36\u0166\34\12\36"+
    "\266\34\u0100\40\u0e00\34\u1040\0\u0150\41\140\0\20\41\u0100\0\200\41\200\0"+
    "\u19c0\41\100\0\u5200\41\u0c00\0\u2bb0\37\u2150\0\u0200\41\u0465\0\73\41\75\34"+
    "\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\3\4\1\5\1\6\4\1"+
    "\1\7\3\4\1\10\2\1\7\0\2\4\4\0\1\4"+
    "\1\5\1\6\1\11\34\0\1\12\2\0\2\12\1\4"+
    "\1\13\2\0\1\14\1\0\1\15\16\0\1\12\2\0"+
    "\1\14\1\12\4\14\4\12\1\14\1\12\1\0\1\16"+
    "\1\0\1\16\5\0\1\17\2\0\2\20\1\0\1\17"+
    "\6\0\3\21\24\0\2\22\2\0\1\12\3\0\2\23"+
    "\1\12\14\0\1\12\1\14\2\24\12\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\224\0\271\0\336\0\u0103"+
    "\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc\0\45\0\u01e1\0\u0206"+
    "\0\u022b\0\45\0\u0250\0\u0275\0\u029a\0\u02bf\0\u02e4\0\u0309"+
    "\0\u032e\0\u0353\0\u0378\0\u039d\0\u03c2\0\u03e7\0\u040c\0\u0431"+
    "\0\u0456\0\u047b\0\45\0\45\0\u014d\0\u04a0\0\u04c5\0\u04ea"+
    "\0\u050f\0\u0534\0\u0559\0\u057e\0\u05a3\0\u05c8\0\u05ed\0\u0612"+
    "\0\u0637\0\u065c\0\u0681\0\u06a6\0\u06cb\0\u06f0\0\u0715\0\u073a"+
    "\0\u075f\0\u0784\0\u07a9\0\u07ce\0\u07f3\0\u0818\0\u083d\0\u0862"+
    "\0\u0887\0\u08ac\0\u08d1\0\u08f6\0\u091b\0\u0940\0\u0965\0\u098a"+
    "\0\u09af\0\u09d4\0\u09f9\0\u0a1e\0\45\0\u0a43\0\u0172\0\u0a68"+
    "\0\u0a8d\0\u0ab2\0\u0ad7\0\u0afc\0\u0b21\0\u0b46\0\u0b6b\0\u0b90"+
    "\0\u0bb5\0\u0bda\0\u0bff\0\u0c24\0\u0c49\0\u0c6e\0\u0c93\0\u0cb8"+
    "\0\u0cdd\0\u0d02\0\u0d27\0\u0d4c\0\u0d71\0\u0d96\0\u0dbb\0\u0de0"+
    "\0\u0e05\0\u0e2a\0\u0e4f\0\45\0\u0e74\0\u0e74\0\u0e99\0\u0ebe"+
    "\0\u0ee3\0\u0f08\0\u0f2d\0\u07ce\0\u0f52\0\u0f77\0\u0f9c\0\45"+
    "\0\u0fc1\0\u0fe6\0\u100b\0\u1030\0\u1055\0\u107a\0\u109f\0\u10c4"+
    "\0\u0353\0\u10e9\0\45\0\u110e\0\u1133\0\u1158\0\u117d\0\u11a2"+
    "\0\u11c7\0\u11ec\0\u1211\0\u1236\0\u125b\0\u1280\0\u12a5\0\u12ca"+
    "\0\u12ef\0\u1314\0\u1339\0\u135e\0\u1383\0\u13a8\0\u13cd\0\u13f2"+
    "\0\45\0\u1417\0\u143c\0\u1461\0\u1486\0\u14ab\0\u14d0\0\u14f5"+
    "\0\45\0\u151a\0\u153f\0\u1564\0\u1589\0\u15ae\0\u15d3\0\u15f8"+
    "\0\u161d\0\u1642\0\u1667\0\u168c\0\u16b1\0\u16d6\0\u16fb\0\u1720"+
    "\0\u1745\0\45\0\u176a\0\u178f\0\u17b4\0\u17d9\0\u17fe\0\u1823"+
    "\0\u1848\0\u186d\0\u1892\0\u18b7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\2\1\5\2\6\1\7\6\6"+
    "\1\10\2\6\1\11\1\12\1\2\1\13\1\14\1\2"+
    "\1\15\2\2\1\16\1\6\1\17\1\20\1\21\1\6"+
    "\1\22\1\23\2\24\52\0\12\25\1\0\2\25\12\0"+
    "\5\25\12\0\1\26\2\0\1\27\1\0\1\30\1\0"+
    "\1\31\30\0\1\32\1\0\1\33\1\0\1\6\1\34"+
    "\2\6\1\35\5\6\1\0\2\6\2\0\1\36\1\0"+
    "\1\37\1\0\1\40\1\0\1\41\1\0\1\6\1\42"+
    "\1\20\1\21\1\6\5\0\1\32\1\0\1\33\1\0"+
    "\12\6\1\0\2\6\2\0\1\36\1\0\1\37\1\0"+
    "\1\40\1\0\1\41\1\0\1\6\1\42\1\20\1\21"+
    "\1\6\5\0\1\32\1\0\1\33\1\0\1\6\1\34"+
    "\10\6\1\0\2\6\2\0\1\36\1\0\1\37\1\0"+
    "\1\40\1\0\1\41\1\0\1\6\1\42\1\20\1\21"+
    "\1\6\23\0\1\43\47\0\1\44\27\0\12\45\1\0"+
    "\2\45\12\0\5\45\5\0\1\46\1\47\2\0\12\50"+
    "\1\51\2\50\1\52\3\0\1\53\1\0\1\54\3\0"+
    "\1\50\1\55\1\50\1\56\1\50\1\0\1\57\2\60"+
    "\5\0\12\61\1\0\2\61\12\0\5\61\11\0\12\62"+
    "\1\0\2\62\12\0\5\62\5\0\1\32\1\0\1\63"+
    "\1\0\12\42\1\0\2\42\4\0\1\37\1\0\1\40"+
    "\1\0\1\64\1\0\1\42\1\17\1\42\1\21\1\42"+
    "\5\0\1\32\1\0\1\65\1\0\12\20\1\0\2\20"+
    "\2\0\1\36\1\0\1\37\1\0\1\40\1\0\1\64"+
    "\1\0\1\20\1\42\1\20\1\21\1\20\5\0\1\32"+
    "\1\0\1\66\1\0\12\21\1\0\2\21\4\0\1\37"+
    "\1\0\1\40\1\0\1\41\1\0\5\21\7\0\2\67"+
    "\1\0\1\70\2\0\1\71\1\0\1\72\1\0\1\73"+
    "\25\0\1\24\4\0\2\67\1\0\1\70\2\0\1\71"+
    "\1\0\1\72\1\0\1\73\31\0\1\74\2\0\12\25"+
    "\1\0\2\25\12\0\5\25\24\0\1\75\44\0\2\75"+
    "\30\0\1\76\2\0\1\77\44\0\1\77\41\0\12\100"+
    "\1\0\2\100\12\0\5\100\5\0\1\101\3\0\12\102"+
    "\1\0\2\102\4\0\1\103\1\0\1\104\3\0\1\102"+
    "\2\105\1\106\1\102\5\0\1\32\1\0\1\33\1\0"+
    "\2\6\1\107\7\6\1\0\2\6\2\0\1\36\1\0"+
    "\1\37\1\0\1\40\1\0\1\41\1\0\1\6\1\42"+
    "\1\20\1\21\1\6\5\0\1\32\1\0\1\33\1\0"+
    "\5\6\1\107\4\6\1\0\2\6\2\0\1\36\1\0"+
    "\1\37\1\0\1\40\1\0\1\41\1\0\1\6\1\42"+
    "\1\20\1\21\1\6\11\0\12\110\1\0\2\110\12\0"+
    "\1\110\1\0\1\110\1\0\1\110\11\0\12\111\1\0"+
    "\2\111\12\0\5\111\11\0\12\112\1\0\2\112\12\0"+
    "\5\112\11\0\12\41\1\0\2\41\12\0\1\41\2\113"+
    "\1\0\1\41\5\0\1\32\1\0\1\65\1\0\12\42"+
    "\1\0\2\42\4\0\1\37\1\0\1\40\1\0\1\64"+
    "\1\0\3\42\1\21\1\42\11\0\12\114\1\0\2\114"+
    "\3\0\1\115\6\0\5\114\1\0\1\116\2\117\25\0"+
    "\1\115\14\0\1\116\2\117\1\0\1\120\1\0\1\121"+
    "\1\0\12\50\1\0\2\50\2\0\1\122\1\115\1\53"+
    "\1\0\1\54\3\0\1\50\1\123\1\50\1\56\1\50"+
    "\1\0\1\116\2\117\17\0\1\47\5\0\1\115\14\0"+
    "\1\116\2\117\22\0\1\47\2\0\1\115\14\0\1\116"+
    "\2\117\5\0\12\124\1\0\2\124\12\0\5\124\11\0"+
    "\12\125\1\0\2\125\12\0\5\125\5\0\1\120\1\0"+
    "\1\126\1\0\12\123\1\0\2\123\3\0\1\115\1\53"+
    "\1\0\1\54\3\0\1\123\1\55\1\123\1\56\1\123"+
    "\1\0\1\116\2\117\1\0\1\120\1\0\1\126\1\0"+
    "\12\56\1\0\2\56\3\0\1\115\1\53\1\0\1\54"+
    "\3\0\5\56\1\0\1\116\2\117\6\0\1\127\2\0"+
    "\1\130\1\0\1\131\1\0\1\132\25\0\1\60\7\0"+
    "\1\127\2\0\1\130\1\0\1\131\1\0\1\132\34\0"+
    "\12\61\1\0\2\61\5\0\1\74\4\0\5\61\11\0"+
    "\12\62\1\0\2\62\7\0\1\74\2\0\5\62\5\0"+
    "\1\133\3\0\12\134\1\0\2\134\4\0\1\135\1\0"+
    "\1\136\3\0\1\134\1\137\1\140\1\141\1\134\11\0"+
    "\12\142\1\0\2\142\12\0\1\142\2\143\1\144\1\142"+
    "\5\0\1\101\3\0\12\145\1\0\2\145\4\0\1\103"+
    "\1\0\1\104\3\0\1\145\2\146\1\147\1\145\5\0"+
    "\1\133\3\0\12\150\1\0\2\150\4\0\1\135\1\0"+
    "\1\136\3\0\1\150\1\151\1\152\1\153\1\150\5\0"+
    "\1\154\3\0\12\154\1\0\2\154\12\0\1\154\1\155"+
    "\1\156\1\0\1\154\24\0\1\157\44\0\2\157\30\0"+
    "\1\160\2\0\1\161\44\0\1\161\35\0\1\162\1\0"+
    "\1\163\1\0\12\164\1\0\2\164\4\0\1\165\1\0"+
    "\1\166\3\0\5\164\46\0\1\167\2\170\16\0\1\171"+
    "\42\0\1\171\32\0\1\172\2\0\12\100\1\0\2\100"+
    "\12\0\5\100\11\0\12\173\1\0\2\173\12\0\5\173"+
    "\7\0\1\174\1\0\12\102\1\0\2\102\12\0\1\102"+
    "\2\105\1\106\1\102\11\0\12\175\1\0\2\175\12\0"+
    "\5\175\11\0\12\176\1\0\2\176\12\0\5\176\7\0"+
    "\1\177\1\0\12\105\1\0\2\105\10\0\1\200\1\0"+
    "\3\105\1\106\1\105\7\0\1\174\1\0\12\106\1\0"+
    "\2\106\12\0\5\106\5\0\1\201\1\0\1\33\1\0"+
    "\12\6\1\0\2\6\2\0\1\36\1\0\1\37\1\0"+
    "\1\40\1\0\1\41\1\0\1\6\1\42\1\20\1\21"+
    "\1\6\1\0\1\202\2\203\5\0\12\110\1\0\2\110"+
    "\2\0\1\36\7\0\1\110\1\0\1\110\1\0\1\110"+
    "\11\0\12\111\1\0\2\111\5\0\1\172\4\0\5\111"+
    "\11\0\12\112\1\0\2\112\7\0\1\172\2\0\5\112"+
    "\7\0\1\200\1\0\12\113\1\0\2\113\10\0\1\200"+
    "\1\0\3\113\1\0\1\113\6\0\1\204\2\0\12\114"+
    "\1\0\2\114\12\0\5\114\5\0\1\46\1\47\2\0"+
    "\12\50\1\51\2\50\1\52\3\0\1\53\1\0\1\54"+
    "\3\0\1\50\1\55\1\50\1\56\1\50\1\0\1\57"+
    "\1\205\1\60\5\0\12\114\1\0\2\114\12\0\5\114"+
    "\5\0\1\206\3\0\12\207\1\0\2\207\4\0\1\210"+
    "\1\0\1\211\3\0\5\207\11\0\12\212\1\0\2\212"+
    "\12\0\1\212\1\0\1\212\1\0\1\212\5\0\1\120"+
    "\1\0\1\121\1\0\12\123\1\0\2\123\3\0\1\115"+
    "\1\53\1\0\1\54\3\0\3\123\1\56\1\123\1\0"+
    "\1\116\2\117\5\0\12\124\1\0\2\124\5\0\1\204"+
    "\4\0\5\124\11\0\12\125\1\0\2\125\7\0\1\204"+
    "\2\0\5\125\5\0\1\213\3\0\12\214\1\0\2\214"+
    "\4\0\1\215\1\0\1\216\3\0\1\214\1\217\1\214"+
    "\1\220\1\214\24\0\1\221\44\0\2\221\30\0\1\222"+
    "\2\0\1\223\44\0\1\223\41\0\12\224\1\0\2\224"+
    "\12\0\5\224\7\0\1\33\1\0\12\134\1\0\2\134"+
    "\10\0\1\41\1\0\1\134\2\140\1\141\1\134\11\0"+
    "\12\225\1\0\2\225\12\0\5\225\11\0\12\226\1\0"+
    "\2\226\12\0\5\226\7\0\1\63\1\0\12\140\1\0"+
    "\2\140\10\0\1\64\1\0\1\140\1\137\1\140\1\141"+
    "\1\140\7\0\1\65\1\0\12\140\1\0\2\140\10\0"+
    "\1\64\1\0\3\140\1\141\1\140\7\0\1\66\1\0"+
    "\12\141\1\0\2\141\10\0\1\41\1\0\5\141\7\0"+
    "\1\41\1\0\12\142\1\0\2\142\10\0\1\41\1\0"+
    "\1\142\2\143\1\144\1\142\7\0\1\64\1\0\12\143"+
    "\1\0\2\143\10\0\1\64\1\0\3\143\1\144\1\143"+
    "\7\0\1\41\1\0\12\144\1\0\2\144\10\0\1\41"+
    "\1\0\5\144\7\0\1\33\1\0\12\145\1\0\2\145"+
    "\10\0\1\41\1\0\1\145\2\146\1\147\1\145\7\0"+
    "\1\65\1\0\12\146\1\0\2\146\10\0\1\64\1\0"+
    "\3\146\1\147\1\146\7\0\1\33\1\0\12\147\1\0"+
    "\2\147\10\0\1\41\1\0\5\147\7\0\1\174\1\0"+
    "\12\150\1\0\2\150\12\0\1\150\2\152\1\153\1\150"+
    "\7\0\1\227\1\0\12\152\1\0\2\152\10\0\1\200"+
    "\1\0\1\152\1\151\1\152\1\153\1\152\7\0\1\177"+
    "\1\0\12\152\1\0\2\152\10\0\1\200\1\0\3\152"+
    "\1\153\1\152\7\0\1\163\1\0\12\153\1\0\2\153"+
    "\12\0\5\153\43\0\2\154\46\0\1\230\2\231\16\0"+
    "\1\232\42\0\1\232\35\0\12\233\1\0\2\233\12\0"+
    "\5\233\5\0\1\133\3\0\12\234\1\0\2\234\4\0"+
    "\1\135\1\0\1\136\3\0\1\234\1\235\1\234\1\153"+
    "\1\234\11\0\12\236\1\0\2\236\12\0\5\236\11\0"+
    "\12\237\1\0\2\237\12\0\5\237\47\0\1\170\43\0"+
    "\1\240\2\241\1\0\1\32\1\0\1\163\1\0\12\164"+
    "\1\0\2\164\4\0\1\37\1\0\1\40\3\0\5\164"+
    "\6\0\1\242\2\0\12\173\1\0\2\173\12\0\5\173"+
    "\5\0\1\101\3\0\12\106\1\0\2\106\4\0\1\103"+
    "\1\0\1\104\3\0\5\106\11\0\12\175\1\0\2\175"+
    "\5\0\1\242\4\0\5\175\11\0\12\176\1\0\2\176"+
    "\7\0\1\242\2\0\5\176\5\0\1\101\3\0\12\147"+
    "\1\0\2\147\4\0\1\103\1\0\1\104\3\0\5\147"+
    "\11\0\12\144\1\0\2\144\12\0\5\144\47\0\1\203"+
    "\2\0\1\120\1\0\1\126\1\0\12\204\1\0\2\204"+
    "\4\0\1\53\1\0\1\54\3\0\5\204\5\0\1\46"+
    "\1\47\2\0\1\50\1\243\2\50\1\244\1\50\1\245"+
    "\1\50\1\246\1\50\1\51\2\50\1\52\3\0\1\53"+
    "\1\0\1\54\3\0\1\50\1\55\1\50\1\56\1\50"+
    "\1\0\1\57\2\60\5\0\12\247\1\0\2\247\12\0"+
    "\5\247\7\0\1\121\1\0\12\207\1\0\2\207\3\0"+
    "\1\115\6\0\5\207\1\0\1\116\2\117\5\0\12\250"+
    "\1\0\2\250\12\0\5\250\11\0\12\251\1\0\2\251"+
    "\12\0\5\251\11\0\12\212\1\0\2\212\2\0\1\122"+
    "\1\115\6\0\1\212\1\0\1\212\1\0\1\212\1\0"+
    "\1\116\2\117\5\0\12\252\1\0\2\252\12\0\5\252"+
    "\7\0\1\121\1\0\12\214\1\0\2\214\3\0\1\115"+
    "\6\0\3\214\1\220\1\214\1\0\1\116\2\117\5\0"+
    "\12\253\1\0\2\253\12\0\5\253\11\0\12\254\1\0"+
    "\2\254\12\0\5\254\7\0\1\126\1\0\12\214\1\0"+
    "\2\214\12\0\1\214\1\217\1\214\1\220\1\214\7\0"+
    "\1\126\1\0\12\220\1\0\2\220\12\0\5\220\46\0"+
    "\1\255\2\47\16\0\1\221\42\0\1\221\32\0\1\256"+
    "\2\0\12\224\1\0\2\224\12\0\5\224\11\0\12\225"+
    "\1\0\2\225\5\0\1\256\4\0\5\225\11\0\12\226"+
    "\1\0\2\226\7\0\1\256\2\0\5\226\5\0\1\133"+
    "\3\0\12\257\1\0\2\257\4\0\1\135\1\0\1\136"+
    "\3\0\1\257\1\260\1\257\1\141\1\257\47\0\1\231"+
    "\43\0\1\261\2\262\2\0\1\263\2\0\12\233\1\0"+
    "\2\233\12\0\5\233\7\0\1\174\1\0\12\234\1\0"+
    "\2\234\12\0\3\234\1\153\1\234\7\0\1\163\1\0"+
    "\12\234\1\0\2\234\12\0\1\234\1\235\1\234\1\153"+
    "\1\234\11\0\12\236\1\0\2\236\5\0\1\263\4\0"+
    "\5\236\11\0\12\237\1\0\2\237\7\0\1\263\2\0"+
    "\5\237\47\0\1\241\4\0\1\174\42\0\1\120\1\0"+
    "\1\121\1\0\12\50\1\0\1\264\1\50\2\0\1\122"+
    "\1\115\1\53\1\0\1\54\3\0\1\50\1\123\1\50"+
    "\1\56\1\50\1\0\1\116\2\117\1\0\1\120\1\0"+
    "\1\121\1\0\12\50\1\0\2\264\2\0\1\122\1\115"+
    "\1\53\1\0\1\54\3\0\1\50\1\123\1\50\1\56"+
    "\1\50\1\0\1\116\2\117\1\0\1\120\1\0\1\121"+
    "\1\0\1\265\2\50\1\266\6\50\1\0\2\50\2\0"+
    "\1\122\1\115\1\53\1\0\1\54\3\0\1\50\1\123"+
    "\1\50\1\56\1\50\1\0\1\116\2\117\1\0\1\120"+
    "\1\0\1\121\1\0\3\50\1\266\6\50\1\0\2\50"+
    "\2\0\1\122\1\115\1\53\1\0\1\54\3\0\1\50"+
    "\1\123\1\50\1\56\1\50\1\0\1\116\2\117\2\0"+
    "\1\267\2\0\12\247\1\0\2\247\12\0\5\247\11\0"+
    "\12\250\1\0\2\250\5\0\1\267\4\0\5\250\11\0"+
    "\12\251\1\0\2\251\7\0\1\267\2\0\5\251\6\0"+
    "\1\270\2\0\12\252\1\0\2\252\12\0\5\252\11\0"+
    "\12\253\1\0\2\253\5\0\1\270\4\0\5\253\11\0"+
    "\12\254\1\0\2\254\7\0\1\270\2\0\5\254\31\0"+
    "\1\115\14\0\1\116\1\271\1\117\3\0\1\163\44\0"+
    "\1\33\1\0\12\257\1\0\2\257\10\0\1\41\1\0"+
    "\3\257\1\141\1\257\7\0\1\66\1\0\12\257\1\0"+
    "\2\257\10\0\1\41\1\0\1\257\1\260\1\257\1\141"+
    "\1\257\47\0\1\262\2\0\1\162\1\0\1\163\1\0"+
    "\12\263\1\0\2\263\4\0\1\165\1\0\1\166\3\0"+
    "\5\263\5\0\1\120\1\0\1\121\1\0\12\50\1\0"+
    "\2\50\2\0\1\122\1\115\1\53\1\0\1\54\3\0"+
    "\1\50\1\123\1\50\1\56\1\50\1\0\1\272\2\271"+
    "\1\0\1\120\1\0\1\121\1\0\11\50\1\264\1\0"+
    "\2\50\2\0\1\122\1\115\1\53\1\0\1\54\3\0"+
    "\1\50\1\123\1\50\1\56\1\50\1\0\1\116\2\117"+
    "\1\0\1\120\1\0\1\121\1\0\7\50\1\264\2\50"+
    "\1\0\2\50\2\0\1\122\1\115\1\53\1\0\1\54"+
    "\3\0\1\50\1\123\1\50\1\56\1\50\1\0\1\116"+
    "\2\117\3\0\1\121\21\0\1\115\14\0\1\116\2\117"+
    "\3\0\1\126\42\0\1\46\1\47\2\0\12\50\1\51"+
    "\2\50\1\52\2\0\1\115\1\53\1\0\1\54\3\0"+
    "\1\50\1\55\1\50\1\56\1\50\1\0\1\273\2\205"+
    "\1\0\1\46\1\47\2\0\12\50\1\51\2\50\1\52"+
    "\2\0\1\115\1\53\1\0\1\54\3\0\1\50\1\55"+
    "\1\50\1\56\1\50\1\0\1\273\1\274\1\205\1\0"+
    "\1\46\1\47\2\0\1\50\1\243\2\50\1\244\1\50"+
    "\1\245\1\50\1\246\1\50\1\51\2\50\1\52\3\0"+
    "\1\53\1\0\1\54\3\0\1\50\1\55\1\50\1\56"+
    "\1\50\1\0\1\57\1\205\1\60\1\0\1\46\1\47"+
    "\2\0\1\50\1\243\2\50\1\244\1\50\1\245\1\50"+
    "\1\246\1\50\1\51\2\50\1\52\2\0\1\115\1\53"+
    "\1\0\1\54\3\0\1\50\1\55\1\50\1\56\1\50"+
    "\1\0\1\273\2\205";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6364];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\13\1\1\11\3\1\1\11\2\1\7\0"+
    "\2\1\4\0\1\1\2\11\1\1\34\0\1\1\2\0"+
    "\4\1\2\0\1\1\1\0\1\11\16\0\1\1\2\0"+
    "\14\1\1\0\1\11\1\0\1\1\5\0\1\1\2\0"+
    "\1\1\1\11\1\0\1\1\6\0\2\1\1\11\24\0"+
    "\1\1\1\11\2\0\1\1\3\0\1\1\1\11\1\1"+
    "\14\0\3\1\1\11\12\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the facetSource of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

/** 
sym is another auto generated class, created by CUP (parser generator)
*/
public static final int ALPHANUM          = 0;
public static final int APOSTROPHE        = 1;
public static final int NUM               = 6;
public static final int CJ                = 7;
public static final int PHRASE            = 14;
public static final int LEFT_PARENTHESIS  = 15;
public static final int RIGHT_PARENTHESIS = 16;
public static final int AND_ALPHANUM	  = 17;
public static final int AND_OPERATOR	  = 18;
public static final int OR_ALPHANUM		  = 19;
public static final int OR_OPERATOR		  = 20;
public static final int NOT_OPERATOR	  = 21;
@Deprecated
public static final int NOT_WS_OPERATOR	  = 22;
public static final int NOT_ALPHANUM 	  = 23;
public static final int RIGHT_PAREN_OR 	  = 24;
public static final int RIGHT_PAREN_AND	  = 25;
public static final int WILDCARD_TOKEN = 26;
public static final int DASH = 27;
public static final int ALPHANUM_EMBEDDED_PAR = 28;
public static final int HASHTAG = 29;
public static final int UNARY_EVENT		  = -1;
public static final int BINARY_EVENT	  = -2;
public static final int UNARY_OR_BINARY_EVENT = -3;




public static final String [] TOKEN_TYPES = new String[] { "<ALPHANUM>",
			"<APOSTROPHE>", "<ACRONYM>", "<COMPANY>", "<EMAIL>", "<HOST>",
			"<NUM>", "<CJ>", "<ACRONYM_DEP>", "<SOUTHEAST_ASIAN>",
			"<IDEOGRAPHIC>", "<HIRAGANA>",
			"<KATAKANA>",
			"<HANGUL>",
			// SEMEDICO: added these token types
			"<PHRASE>", "<LEFT_PARENTHESIS>", "<RIGHT_PARENTHESIS>",
			"<AND_ALPHANUM>", "<AND_OPERATOR>", "<OR_ALPHANUM>",
			"<OR_OPERATOR>", "<NOT_OPERATOR>", "<NOT_WS_OPERATOR>",
			"<NOT_ALPHANUM>", "<WILDCARD_TOKEN>" };

public final int yychar()
{
    return yychar;
}

/**
 * Fills a Lucene token with the current token text.
 */
final public void getText(CharTermAttribute termAtt) {
	termAtt.setEmpty();
	termAtt.append(new String(zzBuffer), zzStartRead, zzMarkedPos);
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public QueryTokenizerImpl(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public QueryTokenizerImpl(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 222) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { /* ignore */
          }
        case 21: break;
        case 2: 
          { return new Symbol(LEFT_PARENTHESIS, yytext());
          }
        case 22: break;
        case 3: 
          { return new Symbol(RIGHT_PARENTHESIS, yytext());
          }
        case 23: break;
        case 4: 
          { return new Symbol(ALPHANUM, yytext());
          }
        case 24: break;
        case 5: 
          { return new Symbol(AND_OPERATOR, yytext());
          }
        case 25: break;
        case 6: 
          { return new Symbol(OR_OPERATOR, yytext());
          }
        case 26: break;
        case 7: 
          { return new Symbol(WILDCARD_TOKEN, yytext());
          }
        case 27: break;
        case 8: 
          { return new Symbol(CJ, yytext());
          }
        case 28: break;
        case 9: 
          { return new Symbol(HASHTAG, yytext());
          }
        case 29: break;
        case 10: 
          { return new Symbol(DASH, yytext());
          }
        case 30: break;
        case 11: 
          { return new Symbol(APOSTROPHE, yytext());
          }
        case 31: break;
        case 12: 
          { return new Symbol(NUM, yytext());
          }
        case 32: break;
        case 13: 
          { return new Symbol(PHRASE, yytext());
          }
        case 33: break;
        case 14: 
          { yypushback(1); return new Symbol(NOT_OPERATOR, String.valueOf(yycharat(yylength()-1)));
          }
        case 34: break;
        case 15: 
          { return new Symbol(ALPHANUM_EMBEDDED_PAR, yytext());
          }
        case 35: break;
        case 16: 
          { yypushback(1); return new Symbol(RIGHT_PAREN_OR, yytext());
          }
        case 36: break;
        case 17: 
          { yypushback(1); return new Symbol(NOT_ALPHANUM, yytext());
          }
        case 37: break;
        case 18: 
          { yypushback(1); return new Symbol(OR_ALPHANUM, yytext().substring(1));
          }
        case 38: break;
        case 19: 
          { yypushback(1); return new Symbol(RIGHT_PAREN_AND, yytext());
          }
        case 39: break;
        case 20: 
          { yypushback(1); return new Symbol(AND_ALPHANUM, yytext().substring(1));
          }
        case 40: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
