/* The following code was generated by JFlex 1.5.0-SNAPSHOT on 5/3/16 10:00 AM */

package de.julielab.semedico.core.services.query;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 _       __                 _             __
| |     / /___ __________  (_)___  ____ _/ /
| | /| / / __ `/ ___/ __ \/ / __ \/ __ `/ / 
| |/ |/ / /_/ / /  / / / / / / / / /_/ /_/  
|__/|__/\__,_/_/  /_/ /_/_/_/ /_/\__, (_)   
                                /____/      

The following code is auto generated.
Please change the .lex file and run jflex if you want to change it!

Your find the .lex file at
/semedico-core/src/main/java/de/julielab/semedico/core/services/query/QueryTokenizerImpl.lex
It should be compiled into
/semedico-core/src/main/java/de/julielab/semedico/core/services/query/QueryTokenizerImpl.java

by running java -jar src/main/resources/JFlex.jar.
*/
import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * on 5/3/16 10:00 AM from the specification file
 * <tt>/Volumes/OUTERSPACE/Coding/workspace-semedico-nightly/semedico-core/src/main/java/de/julielab/semedico/core/services/query/QueryTokenizerImpl.lex</tt>
 */
public class QueryTokenizerImpl {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\43\1\42\1\0\1\43\1\41\22\0\1\43\1\4\1\24"+
    "\3\0\1\17\1\23\1\1\1\2\1\32\1\0\1\31\1\3\1\31"+
    "\1\31\12\34\5\0\1\32\1\0\1\13\2\33\1\16\11\33\1\5"+
    "\1\11\2\33\1\21\1\33\1\12\6\33\1\25\1\0\1\26\1\0"+
    "\1\31\1\0\1\15\2\33\1\14\11\33\1\10\1\6\2\33\1\20"+
    "\1\33\1\7\6\33\1\27\1\22\1\30\102\0\27\33\1\0\37\33"+
    "\1\0\u0568\33\12\35\206\33\12\35\u026c\33\12\35\166\33\12\35\166\33"+
    "\12\35\166\33\12\35\166\33\12\35\167\33\11\35\166\33\12\35\166\33"+
    "\12\35\166\33\12\35\340\33\12\35\166\33\12\35\u0166\33\12\35\266\33"+
    "\u0100\37\u0e00\33\u1040\0\u0150\40\140\0\20\40\u0100\0\200\40\200\0\u19c0\40"+
    "\100\0\u5200\40\u0c00\0\u2bb0\36\u2150\0\u0200\40\u0465\0\73\40\75\33\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\3\4\1\5\1\6\3\1"+
    "\1\7\3\4\1\10\2\1\7\0\2\4\4\0\1\4"+
    "\1\5\1\6\34\0\1\11\2\0\2\11\1\4\1\12"+
    "\2\0\1\13\1\0\1\14\16\0\1\11\2\0\1\13"+
    "\1\11\4\13\4\11\1\13\1\11\1\0\1\15\1\0"+
    "\1\15\5\0\1\16\2\0\2\17\1\0\1\16\6\0"+
    "\3\20\24\0\2\21\2\0\1\11\3\0\2\22\1\11"+
    "\14\0\1\11\1\13\2\23\12\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\u0120\0\u0144\0\u0168\0\u018c\0\44\0\u01b0\0\u01d4\0\u01f8"+
    "\0\44\0\u021c\0\u0240\0\u0264\0\u0288\0\u02ac\0\u02d0\0\u02f4"+
    "\0\u0318\0\u033c\0\u0360\0\u0384\0\u03a8\0\u03cc\0\u03f0\0\u0414"+
    "\0\u0438\0\44\0\44\0\u045c\0\u0480\0\u04a4\0\u04c8\0\u04ec"+
    "\0\u0510\0\u0534\0\u0558\0\u057c\0\u05a0\0\u05c4\0\u05e8\0\u060c"+
    "\0\u0630\0\u0654\0\u0678\0\u069c\0\u06c0\0\u06e4\0\u0708\0\u072c"+
    "\0\u0750\0\u0774\0\u0798\0\u07bc\0\u07e0\0\u0804\0\u0828\0\u084c"+
    "\0\u0870\0\u0894\0\u08b8\0\u08dc\0\u0900\0\u0924\0\u0948\0\u096c"+
    "\0\u0990\0\u09b4\0\44\0\u09d8\0\u0144\0\u09fc\0\u0a20\0\u0a44"+
    "\0\u0a68\0\u0a8c\0\u0ab0\0\u0ad4\0\u0af8\0\u0b1c\0\u0b40\0\u0b64"+
    "\0\u0b88\0\u0bac\0\u0bd0\0\u0bf4\0\u0c18\0\u0c3c\0\u0c60\0\u0c84"+
    "\0\u0ca8\0\u0ccc\0\u0cf0\0\u0d14\0\u0d38\0\u0d5c\0\u0d80\0\u0da4"+
    "\0\u0dc8\0\44\0\u0dec\0\u0dec\0\u0e10\0\u0e34\0\u0e58\0\u0e7c"+
    "\0\u0ea0\0\u0774\0\u0ec4\0\u0ee8\0\u0f0c\0\44\0\u0f30\0\u0f54"+
    "\0\u0f78\0\u0f9c\0\u0fc0\0\u0fe4\0\u1008\0\u102c\0\u0318\0\u1050"+
    "\0\44\0\u1074\0\u1098\0\u10bc\0\u10e0\0\u1104\0\u1128\0\u114c"+
    "\0\u1170\0\u1194\0\u11b8\0\u11dc\0\u1200\0\u1224\0\u1248\0\u126c"+
    "\0\u1290\0\u12b4\0\u12d8\0\u12fc\0\u1320\0\u1344\0\44\0\u1368"+
    "\0\u138c\0\u13b0\0\u13d4\0\u13f8\0\u141c\0\u1440\0\44\0\u1464"+
    "\0\u1488\0\u14ac\0\u14d0\0\u14f4\0\u1518\0\u153c\0\u1560\0\u1584"+
    "\0\u15a8\0\u15cc\0\u15f0\0\u1614\0\u1638\0\u165c\0\u1680\0\44"+
    "\0\u16a4\0\u16c8\0\u16ec\0\u1710\0\u1734\0\u1758\0\u177c\0\u17a0"+
    "\0\u17c4\0\u17e8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\2\1\5\2\6\1\7\6\6"+
    "\1\10\2\6\1\11\1\2\1\12\1\13\1\2\1\14"+
    "\2\2\1\15\1\6\1\16\1\17\1\20\1\6\1\21"+
    "\1\22\2\23\51\0\12\24\1\0\2\24\11\0\5\24"+
    "\12\0\1\25\2\0\1\26\1\0\1\27\1\0\1\30"+
    "\27\0\1\31\1\0\1\32\1\0\1\6\1\33\2\6"+
    "\1\34\5\6\1\0\2\6\1\0\1\35\1\0\1\36"+
    "\1\0\1\37\1\0\1\40\1\0\1\6\1\41\1\17"+
    "\1\20\1\6\5\0\1\31\1\0\1\32\1\0\12\6"+
    "\1\0\2\6\1\0\1\35\1\0\1\36\1\0\1\37"+
    "\1\0\1\40\1\0\1\6\1\41\1\17\1\20\1\6"+
    "\5\0\1\31\1\0\1\32\1\0\1\6\1\33\10\6"+
    "\1\0\2\6\1\0\1\35\1\0\1\36\1\0\1\37"+
    "\1\0\1\40\1\0\1\6\1\41\1\17\1\20\1\6"+
    "\23\0\1\42\46\0\1\43\22\0\1\44\1\45\2\0"+
    "\12\46\1\47\2\46\1\50\2\0\1\51\1\0\1\52"+
    "\3\0\1\46\1\53\1\46\1\54\1\46\1\0\1\55"+
    "\2\56\5\0\12\57\1\0\2\57\11\0\5\57\11\0"+
    "\12\60\1\0\2\60\11\0\5\60\5\0\1\31\1\0"+
    "\1\61\1\0\12\41\1\0\2\41\3\0\1\36\1\0"+
    "\1\37\1\0\1\62\1\0\1\41\1\16\1\41\1\20"+
    "\1\41\5\0\1\31\1\0\1\63\1\0\12\17\1\0"+
    "\2\17\1\0\1\35\1\0\1\36\1\0\1\37\1\0"+
    "\1\62\1\0\1\17\1\41\1\17\1\20\1\17\5\0"+
    "\1\31\1\0\1\64\1\0\12\20\1\0\2\20\3\0"+
    "\1\36\1\0\1\37\1\0\1\40\1\0\5\20\7\0"+
    "\2\65\1\0\1\66\2\0\1\67\1\0\1\70\1\0"+
    "\1\71\24\0\1\23\4\0\2\65\1\0\1\66\2\0"+
    "\1\67\1\0\1\70\1\0\1\71\30\0\1\72\2\0"+
    "\12\24\1\0\2\24\11\0\5\24\24\0\1\73\43\0"+
    "\2\73\27\0\1\74\2\0\1\75\43\0\1\75\40\0"+
    "\12\76\1\0\2\76\11\0\5\76\5\0\1\77\3\0"+
    "\12\100\1\0\2\100\3\0\1\101\1\0\1\102\3\0"+
    "\1\100\2\103\1\104\1\100\5\0\1\31\1\0\1\32"+
    "\1\0\2\6\1\105\7\6\1\0\2\6\1\0\1\35"+
    "\1\0\1\36\1\0\1\37\1\0\1\40\1\0\1\6"+
    "\1\41\1\17\1\20\1\6\5\0\1\31\1\0\1\32"+
    "\1\0\5\6\1\105\4\6\1\0\2\6\1\0\1\35"+
    "\1\0\1\36\1\0\1\37\1\0\1\40\1\0\1\6"+
    "\1\41\1\17\1\20\1\6\11\0\12\106\1\0\2\106"+
    "\11\0\1\106\1\0\1\106\1\0\1\106\11\0\12\107"+
    "\1\0\2\107\11\0\5\107\11\0\12\110\1\0\2\110"+
    "\11\0\5\110\11\0\12\40\1\0\2\40\11\0\1\40"+
    "\2\111\1\0\1\40\5\0\1\31\1\0\1\63\1\0"+
    "\12\41\1\0\2\41\3\0\1\36\1\0\1\37\1\0"+
    "\1\62\1\0\3\41\1\20\1\41\11\0\12\112\1\0"+
    "\2\112\2\0\1\113\6\0\5\112\1\0\1\114\2\115"+
    "\24\0\1\113\14\0\1\114\2\115\1\0\1\116\1\0"+
    "\1\117\1\0\12\46\1\0\2\46\1\0\1\120\1\113"+
    "\1\51\1\0\1\52\3\0\1\46\1\121\1\46\1\54"+
    "\1\46\1\0\1\114\2\115\17\0\1\45\4\0\1\113"+
    "\14\0\1\114\2\115\22\0\1\45\1\0\1\113\14\0"+
    "\1\114\2\115\5\0\12\122\1\0\2\122\11\0\5\122"+
    "\11\0\12\123\1\0\2\123\11\0\5\123\5\0\1\116"+
    "\1\0\1\124\1\0\12\121\1\0\2\121\2\0\1\113"+
    "\1\51\1\0\1\52\3\0\1\121\1\53\1\121\1\54"+
    "\1\121\1\0\1\114\2\115\1\0\1\116\1\0\1\124"+
    "\1\0\12\54\1\0\2\54\2\0\1\113\1\51\1\0"+
    "\1\52\3\0\5\54\1\0\1\114\2\115\6\0\1\125"+
    "\2\0\1\126\1\0\1\127\1\0\1\130\24\0\1\56"+
    "\7\0\1\125\2\0\1\126\1\0\1\127\1\0\1\130"+
    "\33\0\12\57\1\0\2\57\4\0\1\72\4\0\5\57"+
    "\11\0\12\60\1\0\2\60\6\0\1\72\2\0\5\60"+
    "\5\0\1\131\3\0\12\132\1\0\2\132\3\0\1\133"+
    "\1\0\1\134\3\0\1\132\1\135\1\136\1\137\1\132"+
    "\11\0\12\140\1\0\2\140\11\0\1\140\2\141\1\142"+
    "\1\140\5\0\1\77\3\0\12\143\1\0\2\143\3\0"+
    "\1\101\1\0\1\102\3\0\1\143\2\144\1\145\1\143"+
    "\5\0\1\131\3\0\12\146\1\0\2\146\3\0\1\133"+
    "\1\0\1\134\3\0\1\146\1\147\1\150\1\151\1\146"+
    "\5\0\1\152\3\0\12\152\1\0\2\152\11\0\1\152"+
    "\1\153\1\154\1\0\1\152\24\0\1\155\43\0\2\155"+
    "\27\0\1\156\2\0\1\157\43\0\1\157\34\0\1\160"+
    "\1\0\1\161\1\0\12\162\1\0\2\162\3\0\1\163"+
    "\1\0\1\164\3\0\5\162\45\0\1\165\2\166\16\0"+
    "\1\167\41\0\1\167\31\0\1\170\2\0\12\76\1\0"+
    "\2\76\11\0\5\76\11\0\12\171\1\0\2\171\11\0"+
    "\5\171\7\0\1\172\1\0\12\100\1\0\2\100\11\0"+
    "\1\100\2\103\1\104\1\100\11\0\12\173\1\0\2\173"+
    "\11\0\5\173\11\0\12\174\1\0\2\174\11\0\5\174"+
    "\7\0\1\175\1\0\12\103\1\0\2\103\7\0\1\176"+
    "\1\0\3\103\1\104\1\103\7\0\1\172\1\0\12\104"+
    "\1\0\2\104\11\0\5\104\5\0\1\177\1\0\1\32"+
    "\1\0\12\6\1\0\2\6\1\0\1\35\1\0\1\36"+
    "\1\0\1\37\1\0\1\40\1\0\1\6\1\41\1\17"+
    "\1\20\1\6\1\0\1\200\2\201\5\0\12\106\1\0"+
    "\2\106\1\0\1\35\7\0\1\106\1\0\1\106\1\0"+
    "\1\106\11\0\12\107\1\0\2\107\4\0\1\170\4\0"+
    "\5\107\11\0\12\110\1\0\2\110\6\0\1\170\2\0"+
    "\5\110\7\0\1\176\1\0\12\111\1\0\2\111\7\0"+
    "\1\176\1\0\3\111\1\0\1\111\6\0\1\202\2\0"+
    "\12\112\1\0\2\112\11\0\5\112\5\0\1\44\1\45"+
    "\2\0\12\46\1\47\2\46\1\50\2\0\1\51\1\0"+
    "\1\52\3\0\1\46\1\53\1\46\1\54\1\46\1\0"+
    "\1\55\1\203\1\56\5\0\12\112\1\0\2\112\11\0"+
    "\5\112\5\0\1\204\3\0\12\205\1\0\2\205\3\0"+
    "\1\206\1\0\1\207\3\0\5\205\11\0\12\210\1\0"+
    "\2\210\11\0\1\210\1\0\1\210\1\0\1\210\5\0"+
    "\1\116\1\0\1\117\1\0\12\121\1\0\2\121\2\0"+
    "\1\113\1\51\1\0\1\52\3\0\3\121\1\54\1\121"+
    "\1\0\1\114\2\115\5\0\12\122\1\0\2\122\4\0"+
    "\1\202\4\0\5\122\11\0\12\123\1\0\2\123\6\0"+
    "\1\202\2\0\5\123\5\0\1\211\3\0\12\212\1\0"+
    "\2\212\3\0\1\213\1\0\1\214\3\0\1\212\1\215"+
    "\1\212\1\216\1\212\24\0\1\217\43\0\2\217\27\0"+
    "\1\220\2\0\1\221\43\0\1\221\40\0\12\222\1\0"+
    "\2\222\11\0\5\222\7\0\1\32\1\0\12\132\1\0"+
    "\2\132\7\0\1\40\1\0\1\132\2\136\1\137\1\132"+
    "\11\0\12\223\1\0\2\223\11\0\5\223\11\0\12\224"+
    "\1\0\2\224\11\0\5\224\7\0\1\61\1\0\12\136"+
    "\1\0\2\136\7\0\1\62\1\0\1\136\1\135\1\136"+
    "\1\137\1\136\7\0\1\63\1\0\12\136\1\0\2\136"+
    "\7\0\1\62\1\0\3\136\1\137\1\136\7\0\1\64"+
    "\1\0\12\137\1\0\2\137\7\0\1\40\1\0\5\137"+
    "\7\0\1\40\1\0\12\140\1\0\2\140\7\0\1\40"+
    "\1\0\1\140\2\141\1\142\1\140\7\0\1\62\1\0"+
    "\12\141\1\0\2\141\7\0\1\62\1\0\3\141\1\142"+
    "\1\141\7\0\1\40\1\0\12\142\1\0\2\142\7\0"+
    "\1\40\1\0\5\142\7\0\1\32\1\0\12\143\1\0"+
    "\2\143\7\0\1\40\1\0\1\143\2\144\1\145\1\143"+
    "\7\0\1\63\1\0\12\144\1\0\2\144\7\0\1\62"+
    "\1\0\3\144\1\145\1\144\7\0\1\32\1\0\12\145"+
    "\1\0\2\145\7\0\1\40\1\0\5\145\7\0\1\172"+
    "\1\0\12\146\1\0\2\146\11\0\1\146\2\150\1\151"+
    "\1\146\7\0\1\225\1\0\12\150\1\0\2\150\7\0"+
    "\1\176\1\0\1\150\1\147\1\150\1\151\1\150\7\0"+
    "\1\175\1\0\12\150\1\0\2\150\7\0\1\176\1\0"+
    "\3\150\1\151\1\150\7\0\1\161\1\0\12\151\1\0"+
    "\2\151\11\0\5\151\42\0\2\152\45\0\1\226\2\227"+
    "\16\0\1\230\41\0\1\230\34\0\12\231\1\0\2\231"+
    "\11\0\5\231\5\0\1\131\3\0\12\232\1\0\2\232"+
    "\3\0\1\133\1\0\1\134\3\0\1\232\1\233\1\232"+
    "\1\151\1\232\11\0\12\234\1\0\2\234\11\0\5\234"+
    "\11\0\12\235\1\0\2\235\11\0\5\235\46\0\1\166"+
    "\42\0\1\236\2\237\1\0\1\31\1\0\1\161\1\0"+
    "\12\162\1\0\2\162\3\0\1\36\1\0\1\37\3\0"+
    "\5\162\6\0\1\240\2\0\12\171\1\0\2\171\11\0"+
    "\5\171\5\0\1\77\3\0\12\104\1\0\2\104\3\0"+
    "\1\101\1\0\1\102\3\0\5\104\11\0\12\173\1\0"+
    "\2\173\4\0\1\240\4\0\5\173\11\0\12\174\1\0"+
    "\2\174\6\0\1\240\2\0\5\174\5\0\1\77\3\0"+
    "\12\145\1\0\2\145\3\0\1\101\1\0\1\102\3\0"+
    "\5\145\11\0\12\142\1\0\2\142\11\0\5\142\46\0"+
    "\1\201\2\0\1\116\1\0\1\124\1\0\12\202\1\0"+
    "\2\202\3\0\1\51\1\0\1\52\3\0\5\202\5\0"+
    "\1\44\1\45\2\0\1\46\1\241\2\46\1\242\1\46"+
    "\1\243\1\46\1\244\1\46\1\47\2\46\1\50\2\0"+
    "\1\51\1\0\1\52\3\0\1\46\1\53\1\46\1\54"+
    "\1\46\1\0\1\55\2\56\5\0\12\245\1\0\2\245"+
    "\11\0\5\245\7\0\1\117\1\0\12\205\1\0\2\205"+
    "\2\0\1\113\6\0\5\205\1\0\1\114\2\115\5\0"+
    "\12\246\1\0\2\246\11\0\5\246\11\0\12\247\1\0"+
    "\2\247\11\0\5\247\11\0\12\210\1\0\2\210\1\0"+
    "\1\120\1\113\6\0\1\210\1\0\1\210\1\0\1\210"+
    "\1\0\1\114\2\115\5\0\12\250\1\0\2\250\11\0"+
    "\5\250\7\0\1\117\1\0\12\212\1\0\2\212\2\0"+
    "\1\113\6\0\3\212\1\216\1\212\1\0\1\114\2\115"+
    "\5\0\12\251\1\0\2\251\11\0\5\251\11\0\12\252"+
    "\1\0\2\252\11\0\5\252\7\0\1\124\1\0\12\212"+
    "\1\0\2\212\11\0\1\212\1\215\1\212\1\216\1\212"+
    "\7\0\1\124\1\0\12\216\1\0\2\216\11\0\5\216"+
    "\45\0\1\253\2\45\16\0\1\217\41\0\1\217\31\0"+
    "\1\254\2\0\12\222\1\0\2\222\11\0\5\222\11\0"+
    "\12\223\1\0\2\223\4\0\1\254\4\0\5\223\11\0"+
    "\12\224\1\0\2\224\6\0\1\254\2\0\5\224\5\0"+
    "\1\131\3\0\12\255\1\0\2\255\3\0\1\133\1\0"+
    "\1\134\3\0\1\255\1\256\1\255\1\137\1\255\46\0"+
    "\1\227\42\0\1\257\2\260\2\0\1\261\2\0\12\231"+
    "\1\0\2\231\11\0\5\231\7\0\1\172\1\0\12\232"+
    "\1\0\2\232\11\0\3\232\1\151\1\232\7\0\1\161"+
    "\1\0\12\232\1\0\2\232\11\0\1\232\1\233\1\232"+
    "\1\151\1\232\11\0\12\234\1\0\2\234\4\0\1\261"+
    "\4\0\5\234\11\0\12\235\1\0\2\235\6\0\1\261"+
    "\2\0\5\235\46\0\1\237\4\0\1\172\41\0\1\116"+
    "\1\0\1\117\1\0\12\46\1\0\1\262\1\46\1\0"+
    "\1\120\1\113\1\51\1\0\1\52\3\0\1\46\1\121"+
    "\1\46\1\54\1\46\1\0\1\114\2\115\1\0\1\116"+
    "\1\0\1\117\1\0\12\46\1\0\2\262\1\0\1\120"+
    "\1\113\1\51\1\0\1\52\3\0\1\46\1\121\1\46"+
    "\1\54\1\46\1\0\1\114\2\115\1\0\1\116\1\0"+
    "\1\117\1\0\1\263\2\46\1\264\6\46\1\0\2\46"+
    "\1\0\1\120\1\113\1\51\1\0\1\52\3\0\1\46"+
    "\1\121\1\46\1\54\1\46\1\0\1\114\2\115\1\0"+
    "\1\116\1\0\1\117\1\0\3\46\1\264\6\46\1\0"+
    "\2\46\1\0\1\120\1\113\1\51\1\0\1\52\3\0"+
    "\1\46\1\121\1\46\1\54\1\46\1\0\1\114\2\115"+
    "\2\0\1\265\2\0\12\245\1\0\2\245\11\0\5\245"+
    "\11\0\12\246\1\0\2\246\4\0\1\265\4\0\5\246"+
    "\11\0\12\247\1\0\2\247\6\0\1\265\2\0\5\247"+
    "\6\0\1\266\2\0\12\250\1\0\2\250\11\0\5\250"+
    "\11\0\12\251\1\0\2\251\4\0\1\266\4\0\5\251"+
    "\11\0\12\252\1\0\2\252\6\0\1\266\2\0\5\252"+
    "\30\0\1\113\14\0\1\114\1\267\1\115\3\0\1\161"+
    "\43\0\1\32\1\0\12\255\1\0\2\255\7\0\1\40"+
    "\1\0\3\255\1\137\1\255\7\0\1\64\1\0\12\255"+
    "\1\0\2\255\7\0\1\40\1\0\1\255\1\256\1\255"+
    "\1\137\1\255\46\0\1\260\2\0\1\160\1\0\1\161"+
    "\1\0\12\261\1\0\2\261\3\0\1\163\1\0\1\164"+
    "\3\0\5\261\5\0\1\116\1\0\1\117\1\0\12\46"+
    "\1\0\2\46\1\0\1\120\1\113\1\51\1\0\1\52"+
    "\3\0\1\46\1\121\1\46\1\54\1\46\1\0\1\270"+
    "\2\267\1\0\1\116\1\0\1\117\1\0\11\46\1\262"+
    "\1\0\2\46\1\0\1\120\1\113\1\51\1\0\1\52"+
    "\3\0\1\46\1\121\1\46\1\54\1\46\1\0\1\114"+
    "\2\115\1\0\1\116\1\0\1\117\1\0\7\46\1\262"+
    "\2\46\1\0\2\46\1\0\1\120\1\113\1\51\1\0"+
    "\1\52\3\0\1\46\1\121\1\46\1\54\1\46\1\0"+
    "\1\114\2\115\3\0\1\117\20\0\1\113\14\0\1\114"+
    "\2\115\3\0\1\124\41\0\1\44\1\45\2\0\12\46"+
    "\1\47\2\46\1\50\1\0\1\113\1\51\1\0\1\52"+
    "\3\0\1\46\1\53\1\46\1\54\1\46\1\0\1\271"+
    "\2\203\1\0\1\44\1\45\2\0\12\46\1\47\2\46"+
    "\1\50\1\0\1\113\1\51\1\0\1\52\3\0\1\46"+
    "\1\53\1\46\1\54\1\46\1\0\1\271\1\272\1\203"+
    "\1\0\1\44\1\45\2\0\1\46\1\241\2\46\1\242"+
    "\1\46\1\243\1\46\1\244\1\46\1\47\2\46\1\50"+
    "\2\0\1\51\1\0\1\52\3\0\1\46\1\53\1\46"+
    "\1\54\1\46\1\0\1\55\1\203\1\56\1\0\1\44"+
    "\1\45\2\0\1\46\1\241\2\46\1\242\1\46\1\243"+
    "\1\46\1\244\1\46\1\47\2\46\1\50\1\0\1\113"+
    "\1\51\1\0\1\52\3\0\1\46\1\53\1\46\1\54"+
    "\1\46\1\0\1\271\2\203";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6156];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\1\11\3\1\1\11\2\1\7\0"+
    "\2\1\4\0\1\1\2\11\34\0\1\1\2\0\4\1"+
    "\2\0\1\1\1\0\1\11\16\0\1\1\2\0\14\1"+
    "\1\0\1\11\1\0\1\1\5\0\1\1\2\0\1\1"+
    "\1\11\1\0\1\1\6\0\2\1\1\11\24\0\1\1"+
    "\1\11\2\0\1\1\3\0\1\1\1\11\1\1\14\0"+
    "\3\1\1\11\12\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

/** 
sym is another auto generated class, created by CUP (parser generator)
*/
public static final int ALPHANUM          = 0;
public static final int APOSTROPHE        = 1;
public static final int NUM               = 6;
public static final int CJ                = 7;
public static final int PHRASE            = 14;
public static final int LEFT_PARENTHESIS  = 15;
public static final int RIGHT_PARENTHESIS = 16;
public static final int AND_ALPHANUM	  = 17;
public static final int AND_OPERATOR	  = 18;
public static final int OR_ALPHANUM		  = 19;
public static final int OR_OPERATOR		  = 20;
public static final int NOT_OPERATOR	  = 21;
@Deprecated
public static final int NOT_WS_OPERATOR	  = 22;
public static final int NOT_ALPHANUM 	  = 23;
public static final int RIGHT_PAREN_OR 	  = 24;
public static final int RIGHT_PAREN_AND	  = 25;
public static final int WILDCARD_TOKEN = 26;
public static final int DASH = 27;
public static final int ALPHANUM_EMBEDDED_PAR = 28;
public static final int UNARY_EVENT		  = -1;
public static final int BINARY_EVENT	  = -2;
public static final int UNARY_OR_BINARY_EVENT = -3;




public static final String [] TOKEN_TYPES = new String[] { "<ALPHANUM>",
			"<APOSTROPHE>", "<ACRONYM>", "<COMPANY>", "<EMAIL>", "<HOST>",
			"<NUM>", "<CJ>", "<ACRONYM_DEP>", "<SOUTHEAST_ASIAN>",
			"<IDEOGRAPHIC>", "<HIRAGANA>",
			"<KATAKANA>",
			"<HANGUL>",
			// SEMEDICO: added these token types
			"<PHRASE>", "<LEFT_PARENTHESIS>", "<RIGHT_PARENTHESIS>",
			"<AND_ALPHANUM>", "<AND_OPERATOR>", "<OR_ALPHANUM>",
			"<OR_OPERATOR>", "<NOT_OPERATOR>", "<NOT_WS_OPERATOR>",
			"<NOT_ALPHANUM>", "<WILDCARD_TOKEN>" };

public final int yychar()
{
    return yychar;
}

/**
 * Fills a Lucene token with the current token text.
 */
final public void getText(CharTermAttribute termAtt) {
	termAtt.setEmpty();
	termAtt.append(new String(zzBuffer), zzStartRead, zzMarkedPos);
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public QueryTokenizerImpl(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public QueryTokenizerImpl(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 220) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { /* ignore */
          }
        case 20: break;
        case 2: 
          { return new Symbol(LEFT_PARENTHESIS, yytext());
          }
        case 21: break;
        case 3: 
          { return new Symbol(RIGHT_PARENTHESIS, yytext());
          }
        case 22: break;
        case 4: 
          { return new Symbol(ALPHANUM, yytext());
          }
        case 23: break;
        case 5: 
          { return new Symbol(AND_OPERATOR, yytext());
          }
        case 24: break;
        case 6: 
          { return new Symbol(OR_OPERATOR, yytext());
          }
        case 25: break;
        case 7: 
          { return new Symbol(WILDCARD_TOKEN, yytext());
          }
        case 26: break;
        case 8: 
          { return new Symbol(CJ, yytext());
          }
        case 27: break;
        case 9: 
          { return new Symbol(DASH, yytext());
          }
        case 28: break;
        case 10: 
          { return new Symbol(APOSTROPHE, yytext());
          }
        case 29: break;
        case 11: 
          { return new Symbol(NUM, yytext());
          }
        case 30: break;
        case 12: 
          { return new Symbol(PHRASE, yytext());
          }
        case 31: break;
        case 13: 
          { yypushback(1); return new Symbol(NOT_OPERATOR, String.valueOf(yycharat(yylength()-1)));
          }
        case 32: break;
        case 14: 
          { return new Symbol(ALPHANUM_EMBEDDED_PAR, yytext());
          }
        case 33: break;
        case 15: 
          { yypushback(1); return new Symbol(RIGHT_PAREN_OR, yytext());
          }
        case 34: break;
        case 16: 
          { yypushback(1); return new Symbol(NOT_ALPHANUM, yytext());
          }
        case 35: break;
        case 17: 
          { yypushback(1); return new Symbol(OR_ALPHANUM, yytext().substring(1));
          }
        case 36: break;
        case 18: 
          { yypushback(1); return new Symbol(RIGHT_PAREN_AND, yytext());
          }
        case 37: break;
        case 19: 
          { yypushback(1); return new Symbol(AND_ALPHANUM, yytext().substring(1));
          }
        case 38: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
