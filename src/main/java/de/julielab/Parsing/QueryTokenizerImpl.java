/* The following code was generated by JFlex 1.4.3 on 02.12.11 11:19 */

package de.julielab.Parsing;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 _       __                 _             __
| |     / /___ __________  (_)___  ____ _/ /
| | /| / / __ `/ ___/ __ \/ / __ \/ __ `/ / 
| |/ |/ / /_/ / /  / / / / / / / / /_/ /_/  
|__/|__/\__,_/_/  /_/ /_/_/_/ /_/\__, (_)   
                                /____/      

The following code is auto generated.
Please change the .lex file and run jflex if you want to change it!
*/
import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 02.12.11 11:19 from the specification file
 * <tt>/Users/johannes/Dropbox/workspace/semedico-core-2/src/main/java/de/julielab/lucene/QueryTokenizerImpl.lex</tt>
 */
class QueryTokenizerImpl {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\61\1\60\1\0\1\61\1\57\22\0\1\61\1\2\1\50"+
    "\3\0\1\13\1\47\1\3\1\4\2\0\1\51\1\1\1\51\1\51"+
    "\12\53\7\0\1\5\1\30\1\52\1\12\2\52\1\17\4\52\1\41"+
    "\1\52\1\11\1\14\1\40\1\52\1\15\1\52\1\36\6\52\4\0"+
    "\1\21\1\0\1\10\1\45\1\37\1\7\1\20\1\52\1\31\1\43"+
    "\1\26\2\52\1\35\1\46\1\6\1\27\1\23\1\52\1\24\1\25"+
    "\1\32\1\34\1\33\1\52\1\22\1\44\1\42\1\0\1\16\103\0"+
    "\27\52\1\0\37\52\1\0\u0568\52\12\54\206\52\12\54\u026c\52\12\54"+
    "\166\52\12\54\166\52\12\54\166\52\12\54\166\52\12\54\167\52\11\54"+
    "\166\52\12\54\166\52\12\54\166\52\12\54\340\52\12\54\166\52\12\54"+
    "\u0166\52\12\54\266\52\u0100\52\u0e00\52\u1040\0\u0150\56\140\0\20\56\u0100\0"+
    "\200\56\200\0\u19c0\56\100\0\u5200\56\u0c00\0\u2bb0\55\u2150\0\u0200\56\u0465\0"+
    "\73\56\75\52\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\4\5\1\1\2\5"+
    "\1\1\5\5\1\1\3\5\1\6\1\1\3\0\1\7"+
    "\1\0\1\10\3\5\2\0\1\5\1\11\1\0\1\11"+
    "\2\5\1\12\1\0\1\12\7\5\12\0\1\10\2\5"+
    "\1\13\1\14\11\5\1\15\7\0\3\13\1\7\1\0"+
    "\10\5\3\0\2\5\1\0\7\5\1\0\7\5\1\0"+
    "\6\5\1\0\2\16\1\5\1\0\1\5\1\0\1\5"+
    "\26\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\62\0\310\0\372\0\u012c"+
    "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\62"+
    "\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa"+
    "\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\62\0\u01c2\0\u06d6"+
    "\0\u0708\0\u073a\0\62\0\u0258\0\u076c\0\u079e\0\u07d0\0\u0802"+
    "\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992"+
    "\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\62\0\u0af0"+
    "\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80"+
    "\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\62\0\u0d7a\0\u0384\0\u0dac"+
    "\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\62"+
    "\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a"+
    "\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a"+
    "\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba"+
    "\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a"+
    "\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\62"+
    "\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838"+
    "\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8"+
    "\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58"+
    "\0\u1b8a\0\u1bbc\0\u1bee";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11"+
    "\1\12\1\10\1\13\1\14\1\15\1\16\1\17\1\10"+
    "\1\2\6\10\1\20\5\10\1\21\1\10\1\22\1\23"+
    "\5\10\1\2\1\24\1\2\1\10\1\25\1\26\1\27"+
    "\1\30\1\31\2\2\63\0\1\32\62\0\1\33\64\0"+
    "\1\34\5\0\1\35\1\36\1\0\1\37\44\0\1\40"+
    "\3\0\1\10\1\41\2\10\1\42\1\10\1\0\2\10"+
    "\1\0\2\10\1\43\25\10\1\44\1\0\1\43\1\10"+
    "\1\25\1\26\1\27\5\0\1\40\3\0\6\10\1\0"+
    "\2\10\1\0\2\10\1\43\25\10\1\44\1\0\1\43"+
    "\1\10\1\25\1\26\1\27\5\0\1\40\3\0\1\10"+
    "\1\41\4\10\1\0\2\10\1\0\2\10\1\43\25\10"+
    "\1\44\1\0\1\43\1\10\1\25\1\26\1\27\5\0"+
    "\1\40\3\0\6\10\1\0\2\10\1\0\1\10\1\45"+
    "\1\43\25\10\1\44\1\0\1\43\1\10\1\25\1\26"+
    "\1\27\7\0\1\46\7\0\1\47\43\0\1\50\2\46"+
    "\1\0\1\40\3\0\6\10\1\0\1\10\1\51\1\0"+
    "\2\10\1\43\25\10\1\44\1\0\1\43\1\10\1\25"+
    "\1\26\1\27\5\0\1\40\3\0\6\10\1\0\2\10"+
    "\1\0\1\10\1\52\1\43\25\10\1\44\1\0\1\43"+
    "\1\10\1\25\1\26\1\27\7\0\1\53\12\0\1\54"+
    "\40\0\1\55\2\53\1\0\1\40\3\0\6\10\1\0"+
    "\2\10\1\0\1\10\1\56\1\43\25\10\1\44\1\0"+
    "\1\43\1\10\1\25\1\26\1\27\5\0\1\40\3\0"+
    "\6\10\1\0\2\10\1\0\2\10\1\43\4\10\1\57"+
    "\20\10\1\44\1\0\1\43\1\10\1\25\1\26\1\27"+
    "\5\0\1\40\3\0\6\10\1\0\2\10\1\0\2\10"+
    "\1\43\2\10\1\60\22\10\1\44\1\0\1\43\1\10"+
    "\1\25\1\26\1\27\5\0\1\40\3\0\6\10\1\0"+
    "\2\10\1\0\2\10\1\43\2\10\1\61\2\10\1\62"+
    "\13\10\1\63\3\10\1\44\1\0\1\43\1\10\1\25"+
    "\1\26\1\27\5\0\1\40\3\0\6\10\1\0\2\10"+
    "\1\0\2\10\1\43\5\10\1\64\17\10\1\44\1\0"+
    "\1\43\1\10\1\25\1\26\1\27\7\0\2\65\1\66"+
    "\2\67\1\70\2\67\1\71\1\72\1\67\1\73\2\67"+
    "\1\0\25\67\3\0\1\67\1\74\1\67\1\74\5\0"+
    "\1\40\3\0\6\25\1\0\2\25\1\0\2\25\1\75"+
    "\25\25\2\0\1\75\3\25\1\27\5\0\1\40\3\0"+
    "\6\26\1\0\2\26\1\0\2\26\1\75\25\26\1\44"+
    "\1\0\1\75\1\26\1\25\1\26\1\27\5\0\1\40"+
    "\3\0\6\27\1\0\2\27\1\0\2\27\1\43\25\27"+
    "\2\0\1\43\4\27\64\0\1\2\2\0\1\3\62\0"+
    "\1\4\70\0\1\76\63\0\1\35\63\0\1\77\62\0"+
    "\1\37\44\0\1\40\3\0\6\40\1\0\2\40\1\0"+
    "\2\40\1\43\25\40\2\0\1\43\1\40\2\25\1\27"+
    "\5\0\1\40\3\0\2\10\1\100\3\10\1\0\2\10"+
    "\1\0\2\10\1\43\25\10\1\44\1\0\1\43\1\10"+
    "\1\25\1\26\1\27\5\0\1\40\3\0\5\10\1\101"+
    "\1\0\2\10\1\0\2\10\1\43\25\10\1\44\1\0"+
    "\1\43\1\10\1\25\1\26\1\27\11\0\6\43\1\0"+
    "\2\43\1\0\2\43\1\0\25\43\3\0\1\43\2\102"+
    "\12\0\6\103\1\0\2\103\1\0\2\103\1\0\25\103"+
    "\3\0\1\103\1\0\1\103\6\0\1\40\3\0\6\10"+
    "\1\0\2\10\1\0\2\10\1\43\7\10\1\104\15\10"+
    "\1\44\1\0\1\43\1\10\1\25\1\26\1\27\64\0"+
    "\1\46\2\0\1\40\1\0\1\53\1\0\6\10\1\0"+
    "\2\10\1\0\2\10\1\43\25\10\1\44\1\0\1\43"+
    "\1\10\1\25\1\26\1\27\1\0\1\55\2\53\1\0"+
    "\1\40\3\0\6\10\1\0\2\10\1\0\2\10\1\43"+
    "\7\10\1\105\15\10\1\44\1\0\1\43\1\10\1\25"+
    "\1\26\1\27\64\0\1\53\2\0\1\40\3\0\1\10"+
    "\1\106\4\10\1\0\2\10\1\0\2\10\1\43\25\10"+
    "\1\44\1\0\1\43\1\10\1\25\1\26\1\27\5\0"+
    "\1\40\3\0\1\10\1\107\4\10\1\0\2\10\1\0"+
    "\2\10\1\43\25\10\1\44\1\0\1\43\1\10\1\25"+
    "\1\26\1\27\5\0\1\40\3\0\3\10\1\110\2\10"+
    "\1\0\2\10\1\0\2\10\1\43\25\10\1\44\1\0"+
    "\1\43\1\10\1\25\1\26\1\27\5\0\1\40\3\0"+
    "\6\10\1\0\2\10\1\0\2\10\1\43\5\10\1\111"+
    "\17\10\1\44\1\0\1\43\1\10\1\25\1\26\1\27"+
    "\5\0\1\40\3\0\6\10\1\0\2\10\1\0\2\10"+
    "\1\43\3\10\1\112\21\10\1\44\1\0\1\43\1\10"+
    "\1\25\1\26\1\27\5\0\1\40\3\0\6\10\1\0"+
    "\2\10\1\0\2\10\1\43\5\10\1\113\17\10\1\44"+
    "\1\0\1\43\1\10\1\25\1\26\1\27\5\0\1\40"+
    "\3\0\6\10\1\0\2\10\1\0\2\10\1\43\15\10"+
    "\1\114\7\10\1\44\1\0\1\43\1\10\1\25\1\26"+
    "\1\27\54\0\1\115\6\0\1\116\2\117\1\0\1\74"+
    "\3\0\1\67\1\120\2\67\1\121\1\67\1\0\2\67"+
    "\1\0\2\67\1\0\25\67\1\122\1\115\1\0\1\67"+
    "\1\74\1\67\1\74\1\0\1\116\2\117\1\0\1\74"+
    "\3\0\6\67\1\0\2\67\1\0\2\67\1\0\25\67"+
    "\1\122\1\115\1\0\1\67\1\74\1\67\1\74\1\0"+
    "\1\116\2\117\1\0\1\74\3\0\1\67\1\120\4\67"+
    "\1\0\2\67\1\0\2\67\1\0\25\67\1\122\1\115"+
    "\1\0\1\67\1\74\1\67\1\74\1\0\1\116\2\117"+
    "\13\0\1\71\43\0\1\123\2\65\1\0\1\74\3\0"+
    "\6\67\1\0\1\67\1\124\1\0\2\67\1\0\25\67"+
    "\1\122\1\115\1\0\1\67\1\74\1\67\1\74\1\0"+
    "\1\116\2\117\16\0\1\73\40\0\1\123\2\65\1\0"+
    "\1\74\3\0\6\74\1\0\2\74\1\0\2\74\1\0"+
    "\25\74\1\0\1\115\1\0\4\74\1\0\1\116\2\117"+
    "\5\0\6\125\1\0\2\125\1\0\2\125\1\0\25\125"+
    "\3\0\1\125\2\126\1\127\16\0\1\130\50\0\1\40"+
    "\3\0\6\10\1\0\2\10\1\0\2\10\1\43\25\10"+
    "\1\44\1\0\1\43\1\10\1\25\1\26\1\27\1\0"+
    "\1\50\2\46\1\0\1\40\1\0\1\46\1\0\6\10"+
    "\1\0\2\10\1\0\2\10\1\43\25\10\1\44\1\0"+
    "\1\43\1\10\1\25\1\26\1\27\1\0\1\50\2\46"+
    "\1\0\1\131\3\0\6\102\1\0\2\102\1\0\2\102"+
    "\1\131\25\102\2\0\1\131\3\102\12\0\6\103\1\0"+
    "\2\103\1\0\2\103\1\0\25\103\1\44\2\0\1\103"+
    "\1\0\1\103\6\0\1\40\3\0\3\10\1\132\2\10"+
    "\1\0\2\10\1\0\2\10\1\43\25\10\1\44\1\0"+
    "\1\43\1\10\1\25\1\26\1\27\5\0\1\40\3\0"+
    "\6\10\1\0\2\10\1\0\2\10\1\43\12\10\1\133"+
    "\12\10\1\44\1\0\1\43\1\10\1\25\1\26\1\27"+
    "\5\0\1\40\3\0\6\10\1\0\2\10\1\0\1\10"+
    "\1\134\1\43\25\10\1\44\1\0\1\43\1\10\1\25"+
    "\1\26\1\27\5\0\1\40\3\0\2\10\1\135\3\10"+
    "\1\0\2\10\1\0\2\10\1\43\25\10\1\44\1\0"+
    "\1\43\1\10\1\25\1\26\1\27\5\0\1\40\3\0"+
    "\1\10\1\136\4\10\1\0\2\10\1\0\2\10\1\43"+
    "\25\10\1\44\1\0\1\43\1\10\1\25\1\26\1\27"+
    "\5\0\1\40\3\0\6\10\1\0\2\10\1\0\2\10"+
    "\1\43\10\10\1\137\14\10\1\44\1\0\1\43\1\10"+
    "\1\25\1\26\1\27\5\0\1\40\3\0\6\10\1\0"+
    "\2\10\1\0\2\10\1\43\4\10\1\132\20\10\1\44"+
    "\1\0\1\43\1\10\1\25\1\26\1\27\5\0\1\40"+
    "\3\0\6\10\1\0\2\10\1\0\2\10\1\43\3\10"+
    "\1\140\21\10\1\44\1\0\1\43\1\10\1\25\1\26"+
    "\1\27\5\0\1\40\3\0\3\10\1\141\2\10\1\0"+
    "\2\10\1\0\2\10\1\43\25\10\1\44\1\0\1\43"+
    "\1\10\1\25\1\26\1\27\7\0\2\65\1\66\2\67"+
    "\1\70\2\67\1\71\1\72\1\67\1\73\2\67\1\0"+
    "\25\67\3\0\1\67\1\74\1\67\1\74\2\0\1\117"+
    "\2\0\1\74\3\0\2\67\1\124\3\67\1\0\2\67"+
    "\1\0\2\67\1\0\25\67\1\122\1\115\1\0\1\67"+
    "\1\74\1\67\1\74\1\0\1\116\2\117\1\0\1\74"+
    "\3\0\5\67\1\124\1\0\2\67\1\0\2\67\1\0"+
    "\25\67\1\122\1\115\1\0\1\67\1\74\1\67\1\74"+
    "\1\0\1\116\2\117\5\0\6\142\1\0\2\142\1\0"+
    "\2\142\1\0\25\142\3\0\1\142\1\0\1\142\55\0"+
    "\1\115\6\0\1\116\1\143\1\117\1\0\1\74\3\0"+
    "\6\67\1\0\2\67\1\0\2\67\1\0\25\67\1\122"+
    "\1\115\1\0\1\67\1\74\1\67\1\74\1\0\1\144"+
    "\2\143\1\0\1\125\3\0\6\125\1\0\2\125\1\0"+
    "\2\125\1\43\25\125\2\0\1\43\1\125\2\126\1\127"+
    "\5\0\1\125\3\0\6\126\1\0\2\126\1\0\2\126"+
    "\1\75\25\126\2\0\1\75\3\126\1\127\5\0\1\125"+
    "\3\0\6\127\1\0\2\127\1\0\2\127\1\43\25\127"+
    "\2\0\1\43\4\127\11\0\6\127\1\0\2\127\1\0"+
    "\2\127\1\0\25\127\3\0\4\127\5\0\1\40\3\0"+
    "\6\10\1\0\2\10\1\0\2\10\1\43\10\10\1\145"+
    "\14\10\1\44\1\0\1\43\1\10\1\25\1\26\1\27"+
    "\5\0\1\40\3\0\6\10\1\0\2\10\1\0\2\10"+
    "\1\43\13\10\1\146\11\10\1\44\1\0\1\43\1\10"+
    "\1\25\1\26\1\27\5\0\1\40\3\0\6\10\1\0"+
    "\2\10\1\0\2\10\1\147\25\10\1\44\1\0\1\43"+
    "\1\10\1\25\1\26\1\27\5\0\1\40\3\0\6\10"+
    "\1\0\2\10\1\0\2\10\1\43\4\10\1\150\20\10"+
    "\1\44\1\0\1\43\1\10\1\25\1\26\1\27\5\0"+
    "\1\40\3\0\6\10\1\0\2\10\1\0\2\10\1\43"+
    "\3\10\1\151\21\10\1\44\1\0\1\43\1\10\1\25"+
    "\1\26\1\27\5\0\1\40\3\0\6\10\1\0\2\10"+
    "\1\0\1\10\1\152\1\43\25\10\1\44\1\0\1\43"+
    "\1\10\1\25\1\26\1\27\5\0\1\40\3\0\6\10"+
    "\1\0\2\10\1\0\2\10\1\43\1\10\1\153\23\10"+
    "\1\44\1\0\1\43\1\10\1\25\1\26\1\27\5\0"+
    "\1\40\3\0\6\10\1\0\2\10\1\0\2\10\1\43"+
    "\13\10\1\154\11\10\1\44\1\0\1\43\1\10\1\25"+
    "\1\26\1\27\11\0\6\142\1\0\2\142\1\0\2\142"+
    "\1\0\25\142\1\122\1\115\1\0\1\142\1\0\1\142"+
    "\2\0\1\116\2\117\3\0\2\65\1\66\2\67\1\70"+
    "\2\67\1\71\1\72\1\67\1\73\2\67\1\0\25\67"+
    "\1\0\1\115\1\0\1\67\1\74\1\67\1\74\1\0"+
    "\1\116\2\117\3\0\2\65\1\66\2\67\1\70\2\67"+
    "\1\71\1\72\1\67\1\73\2\67\1\0\25\67\1\0"+
    "\1\115\1\0\1\67\1\74\1\67\1\74\1\0\1\116"+
    "\1\143\1\117\1\0\1\40\3\0\6\10\1\0\2\10"+
    "\1\0\2\10\1\43\4\10\1\155\20\10\1\44\1\0"+
    "\1\43\1\10\1\25\1\26\1\27\5\0\1\40\3\0"+
    "\3\10\1\156\2\10\1\0\2\10\1\0\2\10\1\43"+
    "\25\10\1\44\1\0\1\43\1\10\1\25\1\26\1\27"+
    "\11\0\6\43\1\0\2\43\1\0\1\43\1\157\1\0"+
    "\25\43\3\0\1\43\2\102\6\0\1\40\3\0\1\10"+
    "\1\160\4\10\1\0\2\10\1\0\2\10\1\43\25\10"+
    "\1\44\1\0\1\43\1\10\1\25\1\26\1\27\5\0"+
    "\1\40\3\0\6\10\1\0\2\10\1\0\2\10\1\43"+
    "\15\10\1\161\7\10\1\44\1\0\1\43\1\10\1\25"+
    "\1\26\1\27\5\0\1\40\3\0\6\10\1\0\2\10"+
    "\1\0\2\10\1\43\4\10\1\162\20\10\1\44\1\0"+
    "\1\43\1\10\1\25\1\26\1\27\5\0\1\40\3\0"+
    "\6\10\1\0\2\10\1\0\2\10\1\43\21\10\1\163"+
    "\3\10\1\44\1\0\1\43\1\10\1\25\1\26\1\27"+
    "\5\0\1\40\3\0\6\10\1\0\2\10\1\0\2\10"+
    "\1\43\4\10\1\164\20\10\1\44\1\0\1\43\1\10"+
    "\1\25\1\26\1\27\5\0\1\40\3\0\6\10\1\0"+
    "\2\10\1\0\2\10\1\43\11\10\1\165\13\10\1\44"+
    "\1\0\1\43\1\10\1\25\1\26\1\27\5\0\1\40"+
    "\3\0\6\10\1\0\2\10\1\0\2\10\1\43\10\10"+
    "\1\166\14\10\1\44\1\0\1\43\1\10\1\25\1\26"+
    "\1\27\11\0\6\43\1\0\2\43\1\0\2\43\1\0"+
    "\1\167\24\43\3\0\1\43\2\102\6\0\1\40\3\0"+
    "\6\10\1\0\2\10\1\0\2\10\1\43\7\10\1\170"+
    "\15\10\1\44\1\0\1\43\1\10\1\25\1\26\1\27"+
    "\5\0\1\40\3\0\6\10\1\0\2\10\1\0\2\10"+
    "\1\43\2\10\1\171\22\10\1\44\1\0\1\43\1\10"+
    "\1\25\1\26\1\27\5\0\1\40\3\0\1\10\1\172"+
    "\4\10\1\0\2\10\1\0\2\10\1\43\25\10\1\44"+
    "\1\0\1\43\1\10\1\25\1\26\1\27\5\0\1\40"+
    "\3\0\6\10\1\0\2\10\1\0\2\10\1\43\5\10"+
    "\1\173\17\10\1\44\1\0\1\43\1\10\1\25\1\26"+
    "\1\27\5\0\1\40\3\0\6\10\1\0\2\10\1\0"+
    "\2\10\1\43\20\10\1\146\4\10\1\44\1\0\1\43"+
    "\1\10\1\25\1\26\1\27\5\0\1\40\3\0\6\10"+
    "\1\0\2\10\1\0\1\10\1\174\1\43\25\10\1\44"+
    "\1\0\1\43\1\10\1\25\1\26\1\27\5\0\1\40"+
    "\3\0\6\10\1\0\2\10\1\0\2\10\1\43\4\10"+
    "\1\175\20\10\1\44\1\0\1\43\1\10\1\25\1\26"+
    "\1\27\11\0\6\43\1\0\2\43\1\0\2\43\1\0"+
    "\1\43\1\176\23\43\3\0\1\43\2\102\6\0\1\40"+
    "\3\0\6\10\1\0\2\10\1\0\2\10\1\43\25\10"+
    "\1\44\1\0\1\43\1\10\1\25\1\26\1\27\1\0"+
    "\1\177\2\200\1\0\1\40\3\0\6\10\1\0\2\10"+
    "\1\0\2\10\1\43\4\10\1\201\20\10\1\44\1\0"+
    "\1\43\1\10\1\25\1\26\1\27\5\0\1\40\3\0"+
    "\6\10\1\0\2\10\1\0\2\10\1\202\25\10\1\44"+
    "\1\0\1\43\1\10\1\25\1\26\1\27\5\0\1\40"+
    "\3\0\6\10\1\0\2\10\1\0\2\10\1\43\2\10"+
    "\1\203\22\10\1\44\1\0\1\43\1\10\1\25\1\26"+
    "\1\27\5\0\1\40\3\0\6\10\1\0\2\10\1\0"+
    "\2\10\1\204\25\10\1\44\1\0\1\43\1\10\1\25"+
    "\1\26\1\27\5\0\1\40\3\0\6\10\1\0\2\10"+
    "\1\0\2\10\1\43\5\10\1\205\17\10\1\44\1\0"+
    "\1\43\1\10\1\25\1\26\1\27\11\0\6\43\1\0"+
    "\2\43\1\0\2\43\1\0\2\43\1\206\22\43\3\0"+
    "\1\43\2\102\65\0\1\200\2\0\1\40\3\0\6\10"+
    "\1\0\2\10\1\0\2\10\1\43\1\10\1\156\23\10"+
    "\1\44\1\0\1\43\1\10\1\25\1\26\1\27\11\0"+
    "\6\43\1\0\2\43\1\0\2\43\1\0\15\43\1\207"+
    "\7\43\3\0\1\43\2\102\6\0\1\40\3\0\6\10"+
    "\1\0\2\10\1\0\2\10\1\43\22\10\1\133\2\10"+
    "\1\44\1\0\1\43\1\10\1\25\1\26\1\27\11\0"+
    "\6\43\1\0\2\43\1\0\2\43\1\0\2\43\1\210"+
    "\22\43\3\0\1\43\2\102\6\0\1\40\3\0\1\10"+
    "\1\170\4\10\1\0\2\10\1\0\2\10\1\43\25\10"+
    "\1\44\1\0\1\43\1\10\1\25\1\26\1\27\11\0"+
    "\6\43\1\0\2\43\1\0\1\43\1\211\1\0\25\43"+
    "\3\0\1\43\2\102\12\0\3\43\1\212\2\43\1\0"+
    "\2\43\1\0\2\43\1\0\25\43\3\0\1\43\2\102"+
    "\12\0\6\43\1\0\2\43\1\0\1\43\1\213\1\0"+
    "\25\43\3\0\1\43\2\102\12\0\6\43\1\0\2\43"+
    "\1\0\2\43\1\0\3\43\1\214\21\43\3\0\1\43"+
    "\2\102\12\0\6\43\1\0\2\43\1\0\2\43\1\0"+
    "\10\43\1\215\14\43\3\0\1\43\2\102\12\0\6\43"+
    "\1\0\2\43\1\0\2\43\1\0\7\43\1\216\15\43"+
    "\3\0\1\43\2\102\12\0\6\43\1\0\2\43\1\0"+
    "\2\43\1\0\3\43\1\217\21\43\3\0\1\43\2\102"+
    "\12\0\3\43\1\220\2\43\1\0\2\43\1\0\2\43"+
    "\1\0\25\43\3\0\1\43\2\102\12\0\6\43\1\0"+
    "\2\43\1\0\2\43\1\0\12\43\1\221\12\43\3\0"+
    "\1\43\2\102\12\0\6\43\1\0\2\43\1\0\2\43"+
    "\1\0\4\43\1\222\20\43\3\0\1\43\2\102\12\0"+
    "\6\43\1\0\2\43\1\0\2\43\1\0\23\43\1\223"+
    "\1\43\3\0\1\43\2\102\12\0\6\43\1\0\2\43"+
    "\1\0\2\43\1\0\13\43\1\224\11\43\3\0\1\43"+
    "\2\102\12\0\6\43\1\0\2\43\1\0\2\43\1\0"+
    "\5\43\1\225\17\43\3\0\1\43\2\102\12\0\6\43"+
    "\1\0\2\43\1\0\2\43\1\0\5\43\1\226\17\43"+
    "\3\0\1\43\2\102\12\0\3\43\1\227\2\43\1\0"+
    "\2\43\1\0\2\43\1\0\25\43\3\0\1\43\2\102"+
    "\12\0\1\43\1\230\4\43\1\0\2\43\1\0\2\43"+
    "\1\0\25\43\3\0\1\43\2\102\12\0\6\43\1\0"+
    "\2\43\1\0\2\43\1\0\13\43\1\231\11\43\3\0"+
    "\1\43\2\102\12\0\6\43\1\0\2\43\1\0\2\43"+
    "\1\0\10\43\1\217\14\43\3\0\1\43\2\102\12\0"+
    "\6\43\1\0\2\43\1\0\2\43\1\0\25\43\3\0"+
    "\1\43\2\102\2\0\1\177\2\200\5\0\6\43\1\0"+
    "\2\43\1\0\2\43\1\0\4\43\1\232\20\43\3\0"+
    "\1\43\2\102\12\0\6\43\1\0\2\43\1\0\2\43"+
    "\1\0\3\43\1\233\21\43\3\0\1\43\2\102\12\0"+
    "\6\43\1\0\2\43\1\0\2\43\1\0\24\43\1\230"+
    "\3\0\1\43\2\102\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\22\1\1\11\1\1\3\0"+
    "\1\1\1\0\4\1\2\0\1\1\1\11\1\0\3\1"+
    "\1\11\1\0\10\1\12\0\1\11\15\1\1\11\7\0"+
    "\3\1\1\11\1\0\10\1\3\0\2\1\1\0\7\1"+
    "\1\0\7\1\1\0\6\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\26\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

/** 
sym is another auto generated class, created by CUP (parser generator)
*/
public static final int ALPHANUM          = QueryTokenizer.ALPHANUM;
public static final int APOSTROPHE        = QueryTokenizer.APOSTROPHE;
public static final int NUM               = QueryTokenizer.NUM;
public static final int CJ                = QueryTokenizer.CJ;
public static final int PHRASE            = QueryTokenizer.PHRASE;
public static final int LEFT_PARENTHESIS  = QueryTokenizer.LEFT_PARENTHESIS;
public static final int RIGHT_PARENTHESIS = QueryTokenizer.RIGHT_PARENTHESIS;
public static final int AND		  		  = QueryTokenizer.AND;
public static final int OR		  		  = QueryTokenizer.OR;
public static final int NOT 			  = QueryTokenizer.NOT;
public static final int RELATION		  = QueryTokenizer.RELATION;


public static final String [] TOKEN_TYPES = QueryTokenizer.TOKEN_TYPES;

public final int yychar()
{
    return yychar;
}

/**
 * Fills a Lucene token with the current token text.
 */
final void getText(CharTermAttribute termAtt) {
	termAtt.setEmpty();
	termAtt.append(new String(zzBuffer), zzStartRead, zzMarkedPos);
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  QueryTokenizerImpl(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  QueryTokenizerImpl(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 246) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { yypushback(1); return new Symbol(OR);
          }
        case 15: break;
        case 9: 
          { yypushback(1); return new Symbol(AND);
          }
        case 16: break;
        case 7: 
          { yypushback(3); return new Symbol(RIGHT_PARENTHESIS);
          }
        case 17: break;
        case 12: 
          { return new Symbol(APOSTROPHE, yytext());
          }
        case 18: break;
        case 5: 
          { return new Symbol(ALPHANUM, yytext());
          }
        case 19: break;
        case 6: 
          { return new Symbol(CJ, yytext());
          }
        case 20: break;
        case 8: 
          { yypushback(2); return new Symbol(RIGHT_PARENTHESIS);
          }
        case 21: break;
        case 14: 
          { yypushback(1); return new Symbol(RELATION, yytext());
          }
        case 22: break;
        case 2: 
          { return new Symbol(NOT);
          }
        case 23: break;
        case 1: 
          { /* ignore */
          }
        case 24: break;
        case 13: 
          { return new Symbol(PHRASE, yytext());
          }
        case 25: break;
        case 4: 
          { return new Symbol(RIGHT_PARENTHESIS);
          }
        case 26: break;
        case 3: 
          { return new Symbol(LEFT_PARENTHESIS);
          }
        case 27: break;
        case 11: 
          { return new Symbol(NUM, yytext());
          }
        case 28: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
