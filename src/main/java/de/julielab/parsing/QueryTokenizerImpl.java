/* The following code was generated by JFlex 1.4.3 on 07.12.11 14:03 */

package de.julielab.parsing;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 _       __                 _             __
| |     / /___ __________  (_)___  ____ _/ /
| | /| / / __ `/ ___/ __ \/ / __ \/ __ `/ / 
| |/ |/ / /_/ / /  / / / / / / / / /_/ /_/  
|__/|__/\__,_/_/  /_/ /_/_/_/ /_/\__, (_)   
                                /____/      

The following code is auto generated.
Please change the .lex file and run jflex if you want to change it!
*/
import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 07.12.11 14:03 from the specification file
 * <tt>/home/hellrich/workspace/semedico-core/src/main/java/de/julielab/parsing/QueryTokenizerImpl.lex</tt>
 */
class QueryTokenizerImpl {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\61\1\60\1\0\1\61\1\57\22\0\1\61\1\2\1\50"+
    "\3\0\1\17\1\47\1\11\1\12\2\0\1\51\1\1\1\51\1\51"+
    "\12\53\7\0\1\13\1\32\1\52\1\16\2\52\1\23\4\52\1\41"+
    "\1\52\1\3\1\7\1\40\1\52\1\21\1\52\1\10\6\52\4\0"+
    "\1\25\1\0\1\15\1\45\1\37\1\14\1\24\1\52\1\33\1\43"+
    "\1\31\2\52\1\36\1\46\1\6\1\4\1\27\1\52\1\20\1\30"+
    "\1\5\1\35\1\34\1\52\1\26\1\44\1\42\1\0\1\22\103\0"+
    "\27\52\1\0\37\52\1\0\u0568\52\12\54\206\52\12\54\u026c\52\12\54"+
    "\166\52\12\54\166\52\12\54\166\52\12\54\166\52\12\54\167\52\11\54"+
    "\166\52\12\54\166\52\12\54\166\52\12\54\340\52\12\54\166\52\12\54"+
    "\u0166\52\12\54\266\52\u0100\52\u0e00\52\u1040\0\u0150\56\140\0\20\56\u0100\0"+
    "\200\56\200\0\u19c0\56\100\0\u5200\56\u0c00\0\u2bb0\55\u2150\0\u0200\56\u0465\0"+
    "\73\56\75\52\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\6\3\1\4\1\5\2\3\1\1"+
    "\1\3\1\1\4\3\1\1\3\3\1\6\1\1\2\7"+
    "\4\3\2\0\2\3\1\10\6\0\2\10\2\3\1\11"+
    "\1\0\1\11\1\3\1\12\1\0\1\12\6\3\12\0"+
    "\2\3\1\13\1\14\1\3\2\0\1\15\2\0\1\3"+
    "\1\0\1\3\1\0\6\3\1\0\1\16\7\0\3\13"+
    "\1\3\1\0\1\3\1\17\6\3\3\0\3\3\1\0"+
    "\7\3\1\0\7\3\1\0\6\3\1\0\2\20\1\0"+
    "\1\3\1\0\1\3\26\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\62\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\62\0\u047e\0\62\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578"+
    "\0\u05aa\0\u05dc\0\u060e\0\u0640\0\62\0\u0672\0\u06a4\0\u06d6"+
    "\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\62"+
    "\0\u0866\0\u0898\0\u08ca\0\62\0\u08fc\0\u092e\0\u0960\0\u0992"+
    "\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22"+
    "\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2"+
    "\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\62\0\u0dde\0\u0e10"+
    "\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0"+
    "\0\u0fd2\0\u1004\0\u1036\0\62\0\u1068\0\u03b6\0\u109a\0\u10cc"+
    "\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c"+
    "\0\u128e\0\62\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba"+
    "\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a"+
    "\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da"+
    "\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a"+
    "\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8\0\62"+
    "\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58"+
    "\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8"+
    "\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\u1e14\0\u1e46\0\u1e78"+
    "\0\u1eaa\0\u1edc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\6\1\15\1\6\1\16\1\6"+
    "\1\17\1\20\1\21\1\6\1\2\4\6\1\22\5\6"+
    "\1\23\1\24\5\6\1\2\1\25\1\2\1\6\1\26"+
    "\1\27\1\30\1\31\1\32\2\2\73\0\1\33\45\0"+
    "\1\34\2\33\1\0\1\35\1\0\1\6\1\36\2\6"+
    "\1\37\1\6\2\0\4\6\1\0\2\6\1\0\1\6"+
    "\1\40\1\41\21\6\1\42\1\0\1\41\1\6\1\26"+
    "\1\27\1\30\5\0\1\35\1\0\6\6\2\0\4\6"+
    "\1\0\1\43\1\6\1\0\2\6\1\41\21\6\1\42"+
    "\1\0\1\41\1\6\1\26\1\27\1\30\5\0\1\35"+
    "\1\0\6\6\2\0\4\6\1\0\2\6\1\0\2\6"+
    "\1\41\21\6\1\42\1\0\1\41\1\6\1\26\1\27"+
    "\1\30\5\0\1\35\1\0\1\6\1\36\4\6\2\0"+
    "\4\6\1\0\2\6\1\0\2\6\1\41\21\6\1\42"+
    "\1\0\1\41\1\6\1\26\1\27\1\30\5\0\1\35"+
    "\1\0\6\6\2\0\4\6\1\0\2\43\1\0\2\6"+
    "\1\41\21\6\1\42\1\0\1\41\1\6\1\26\1\27"+
    "\1\30\5\0\1\35\1\0\6\6\2\0\4\6\1\0"+
    "\1\44\1\6\1\0\2\6\1\41\21\6\1\42\1\0"+
    "\1\41\1\6\1\26\1\27\1\30\5\0\2\45\1\46"+
    "\1\47\1\0\1\50\1\51\3\0\1\52\1\0\1\53"+
    "\1\0\1\54\2\0\1\55\40\0\1\35\1\0\1\56"+
    "\2\6\1\57\2\6\2\0\4\6\1\0\2\6\1\0"+
    "\2\6\1\41\21\6\1\42\1\0\1\41\1\6\1\26"+
    "\1\27\1\30\5\0\1\35\1\0\3\6\1\57\2\6"+
    "\2\0\4\6\1\0\2\6\1\0\2\6\1\41\21\6"+
    "\1\42\1\0\1\41\1\6\1\26\1\27\1\30\15\0"+
    "\1\60\5\0\1\61\37\0\1\62\2\60\1\0\1\35"+
    "\1\0\6\6\2\0\4\6\1\0\2\6\1\0\1\6"+
    "\1\63\1\41\21\6\1\42\1\0\1\41\1\6\1\26"+
    "\1\27\1\30\15\0\1\64\10\0\1\65\34\0\1\66"+
    "\2\64\1\0\1\35\1\0\6\6\2\0\4\6\1\0"+
    "\2\6\1\0\1\6\1\67\1\41\21\6\1\42\1\0"+
    "\1\41\1\6\1\26\1\27\1\30\5\0\1\35\1\0"+
    "\6\6\2\0\4\6\1\0\2\6\1\0\2\6\1\41"+
    "\3\6\1\70\15\6\1\42\1\0\1\41\1\6\1\26"+
    "\1\27\1\30\5\0\1\35\1\0\1\6\1\71\4\6"+
    "\2\0\4\6\1\0\1\72\1\6\1\0\2\6\1\41"+
    "\15\6\1\73\3\6\1\42\1\0\1\41\1\6\1\26"+
    "\1\27\1\30\5\0\1\35\1\0\1\6\1\74\4\6"+
    "\2\0\4\6\1\0\2\6\1\0\2\6\1\41\21\6"+
    "\1\42\1\0\1\41\1\6\1\26\1\27\1\30\7\0"+
    "\1\75\1\76\2\75\1\77\1\75\2\100\1\101\1\75"+
    "\1\102\1\75\1\103\2\75\1\104\2\75\1\0\21\75"+
    "\3\0\1\75\1\105\1\75\1\105\5\0\1\35\1\0"+
    "\6\26\2\0\4\26\1\0\2\26\1\0\2\26\1\106"+
    "\21\26\2\0\1\106\3\26\1\30\5\0\1\35\1\0"+
    "\6\27\2\0\4\27\1\0\2\27\1\0\2\27\1\106"+
    "\21\27\1\42\1\0\1\106\1\27\1\26\1\27\1\30"+
    "\5\0\1\35\1\0\6\30\2\0\4\30\1\0\2\30"+
    "\1\0\2\30\1\41\21\30\2\0\1\41\4\30\64\0"+
    "\1\2\61\0\1\33\2\0\1\35\1\0\6\35\2\0"+
    "\4\35\1\0\2\35\1\0\2\35\1\41\21\35\2\0"+
    "\1\41\1\35\2\26\1\30\5\0\1\35\1\0\2\6"+
    "\1\107\3\6\2\0\4\6\1\0\2\6\1\0\2\6"+
    "\1\41\21\6\1\42\1\0\1\41\1\6\1\26\1\27"+
    "\1\30\5\0\1\35\1\0\5\6\1\107\2\0\4\6"+
    "\1\0\2\6\1\0\2\6\1\41\21\6\1\42\1\0"+
    "\1\41\1\6\1\26\1\27\1\30\5\0\1\35\1\0"+
    "\6\6\2\0\4\6\1\0\2\6\1\0\2\6\1\41"+
    "\5\6\1\110\13\6\1\42\1\0\1\41\1\6\1\26"+
    "\1\27\1\30\7\0\6\41\2\0\4\41\1\0\2\41"+
    "\1\0\2\41\1\0\21\41\3\0\1\41\2\111\10\0"+
    "\6\112\2\0\4\112\1\0\2\112\1\0\2\112\1\0"+
    "\21\112\3\0\1\112\1\0\1\112\6\0\1\35\1\0"+
    "\6\6\1\64\1\0\4\6\1\0\2\6\1\0\2\6"+
    "\1\41\21\6\1\42\1\0\1\41\1\6\1\26\1\27"+
    "\1\30\1\0\1\66\2\64\1\0\1\35\1\0\6\6"+
    "\2\0\2\6\1\113\1\6\1\0\2\6\1\0\2\6"+
    "\1\41\21\6\1\42\1\0\1\41\1\6\1\26\1\27"+
    "\1\30\10\0\1\114\2\0\1\115\72\0\1\116\45\0"+
    "\1\114\75\0\2\116\43\0\1\117\2\0\1\120\61\0"+
    "\1\120\72\0\1\116\64\0\1\116\40\0\1\35\1\0"+
    "\6\6\2\0\3\6\1\121\1\0\2\6\1\0\2\6"+
    "\1\41\21\6\1\42\1\0\1\41\1\6\1\26\1\27"+
    "\1\30\5\0\1\35\1\0\6\6\2\0\1\6\1\121"+
    "\2\6\1\0\2\6\1\0\2\6\1\41\21\6\1\42"+
    "\1\0\1\41\1\6\1\26\1\27\1\30\15\0\1\60"+
    "\5\0\1\122\37\0\1\62\2\60\60\0\1\60\2\0"+
    "\1\35\1\0\6\6\2\0\4\6\1\0\2\6\1\0"+
    "\2\6\1\41\5\6\1\123\13\6\1\42\1\0\1\41"+
    "\1\6\1\26\1\27\1\30\15\0\1\64\10\0\1\124"+
    "\34\0\1\66\2\64\60\0\1\64\2\0\1\35\1\0"+
    "\3\6\1\125\2\6\2\0\4\6\1\0\2\6\1\0"+
    "\2\6\1\41\21\6\1\42\1\0\1\41\1\6\1\26"+
    "\1\27\1\30\5\0\1\35\1\0\3\6\1\126\2\6"+
    "\2\0\4\6\1\0\2\6\1\0\2\6\1\41\21\6"+
    "\1\42\1\0\1\41\1\6\1\26\1\27\1\30\5\0"+
    "\1\35\1\0\6\6\2\0\4\6\1\0\2\6\1\0"+
    "\2\6\1\41\2\6\1\127\16\6\1\42\1\0\1\41"+
    "\1\6\1\26\1\27\1\30\5\0\1\35\1\0\1\6"+
    "\1\130\4\6\2\0\4\6\1\0\2\6\1\0\2\6"+
    "\1\41\21\6\1\42\1\0\1\41\1\6\1\26\1\27"+
    "\1\30\5\0\1\35\1\0\1\6\1\131\4\6\2\0"+
    "\4\6\1\0\2\6\1\0\2\6\1\41\21\6\1\42"+
    "\1\0\1\41\1\6\1\26\1\27\1\30\5\0\1\35"+
    "\1\0\6\6\2\0\4\6\1\0\2\6\1\0\2\6"+
    "\1\41\11\6\1\132\7\6\1\42\1\0\1\41\1\6"+
    "\1\26\1\27\1\30\5\0\1\105\1\0\6\75\2\0"+
    "\4\75\1\0\2\75\1\0\2\75\1\0\21\75\1\133"+
    "\1\134\1\0\1\75\1\105\1\75\1\105\1\0\1\135"+
    "\2\136\1\0\1\105\1\0\6\75\2\0\4\75\1\0"+
    "\1\137\1\75\1\0\2\75\1\0\21\75\1\133\1\134"+
    "\1\0\1\75\1\105\1\75\1\105\1\0\1\135\2\136"+
    "\1\0\1\105\1\0\6\75\2\0\4\75\1\0\2\137"+
    "\1\0\2\75\1\0\21\75\1\133\1\134\1\0\1\75"+
    "\1\105\1\75\1\105\1\0\1\135\2\136\50\0\1\134"+
    "\6\0\1\135\2\136\1\0\1\105\1\0\1\140\2\75"+
    "\1\141\2\75\2\0\4\75\1\0\2\75\1\0\2\75"+
    "\1\0\21\75\1\133\1\134\1\0\1\75\1\105\1\75"+
    "\1\105\1\0\1\135\2\136\1\0\1\105\1\0\3\75"+
    "\1\141\2\75\2\0\4\75\1\0\2\75\1\0\2\75"+
    "\1\0\21\75\1\133\1\134\1\0\1\75\1\105\1\75"+
    "\1\105\1\0\1\135\2\136\17\0\1\142\37\0\1\143"+
    "\2\100\22\0\1\142\34\0\1\143\2\100\1\0\1\105"+
    "\1\0\6\105\2\0\4\105\1\0\2\105\1\0\2\105"+
    "\1\0\21\105\1\0\1\134\1\0\4\105\1\0\1\135"+
    "\2\136\3\0\6\144\2\0\4\144\1\0\2\144\1\0"+
    "\2\144\1\0\21\144\3\0\1\144\2\145\1\146\5\0"+
    "\1\35\1\0\6\6\1\33\1\0\4\6\1\0\2\6"+
    "\1\0\2\6\1\41\21\6\1\42\1\0\1\41\1\6"+
    "\1\26\1\27\1\30\1\0\1\34\2\33\1\0\1\35"+
    "\1\0\6\6\2\0\2\6\1\147\1\6\1\0\2\6"+
    "\1\0\2\6\1\41\21\6\1\42\1\0\1\41\1\6"+
    "\1\26\1\27\1\30\5\0\1\150\1\0\6\111\2\0"+
    "\4\111\1\0\2\111\1\0\2\111\1\150\21\111\2\0"+
    "\1\150\3\111\10\0\6\112\2\0\4\112\1\0\2\112"+
    "\1\0\2\112\1\0\21\112\1\42\2\0\1\112\1\0"+
    "\1\112\6\0\1\35\1\0\3\6\1\151\2\6\2\0"+
    "\4\6\1\0\2\6\1\0\2\6\1\41\21\6\1\42"+
    "\1\0\1\41\1\6\1\26\1\27\1\30\11\0\1\152"+
    "\64\0\1\152\67\0\1\152\57\0\1\152\46\0\1\35"+
    "\1\0\6\6\1\60\1\0\4\6\1\0\2\6\1\0"+
    "\2\6\1\41\21\6\1\42\1\0\1\41\1\6\1\26"+
    "\1\27\1\30\1\0\1\62\2\60\11\0\1\60\5\0"+
    "\1\122\43\0\1\35\1\0\6\6\2\0\4\6\1\0"+
    "\2\6\1\0\2\6\1\41\7\6\1\153\11\6\1\42"+
    "\1\0\1\41\1\6\1\26\1\27\1\30\15\0\1\64"+
    "\10\0\1\124\40\0\1\35\1\0\6\6\2\0\4\6"+
    "\1\0\2\6\1\0\1\6\1\154\1\41\21\6\1\42"+
    "\1\0\1\41\1\6\1\26\1\27\1\30\5\0\1\35"+
    "\1\0\6\6\2\0\1\6\1\155\2\6\1\0\2\6"+
    "\1\0\2\6\1\41\21\6\1\42\1\0\1\41\1\6"+
    "\1\26\1\27\1\30\5\0\1\35\1\0\6\6\2\0"+
    "\4\6\1\0\2\6\1\0\2\6\1\41\3\6\1\147"+
    "\15\6\1\42\1\0\1\41\1\6\1\26\1\27\1\30"+
    "\5\0\1\35\1\0\2\6\1\156\3\6\2\0\4\6"+
    "\1\0\2\6\1\0\2\6\1\41\21\6\1\42\1\0"+
    "\1\41\1\6\1\26\1\27\1\30\5\0\1\35\1\0"+
    "\6\6\2\0\4\6\1\0\2\6\1\0\2\6\1\41"+
    "\2\6\1\157\16\6\1\42\1\0\1\41\1\6\1\26"+
    "\1\27\1\30\5\0\1\35\1\0\6\6\2\0\2\6"+
    "\1\160\1\6\1\0\2\6\1\0\2\6\1\41\21\6"+
    "\1\42\1\0\1\41\1\6\1\26\1\27\1\30\7\0"+
    "\6\161\2\0\4\161\1\0\2\161\1\0\2\161\1\0"+
    "\21\161\3\0\1\161\1\0\1\161\10\0\1\75\1\76"+
    "\2\75\1\77\1\75\2\100\1\101\1\75\1\102\1\75"+
    "\1\103\2\75\1\104\2\75\1\0\21\75\3\0\1\75"+
    "\1\105\1\75\1\105\2\0\1\136\2\0\1\105\1\0"+
    "\6\75\2\0\4\75\1\0\2\75\1\0\2\75\1\0"+
    "\21\75\1\133\1\134\1\0\1\75\1\105\1\75\1\105"+
    "\1\0\1\162\2\163\1\0\1\105\1\0\6\75\2\0"+
    "\3\75\1\137\1\0\2\75\1\0\2\75\1\0\21\75"+
    "\1\133\1\134\1\0\1\75\1\105\1\75\1\105\1\0"+
    "\1\135\2\136\1\0\1\105\1\0\6\75\2\0\1\75"+
    "\1\137\2\75\1\0\2\75\1\0\2\75\1\0\21\75"+
    "\1\133\1\134\1\0\1\75\1\105\1\75\1\105\1\0"+
    "\1\135\2\136\57\0\1\143\2\100\50\0\1\134\6\0"+
    "\1\135\1\163\1\136\1\0\1\144\1\0\6\144\2\0"+
    "\4\144\1\0\2\144\1\0\2\144\1\41\21\144\2\0"+
    "\1\41\1\144\2\145\1\146\5\0\1\144\1\0\6\145"+
    "\2\0\4\145\1\0\2\145\1\0\2\145\1\106\21\145"+
    "\2\0\1\106\3\145\1\146\5\0\1\144\1\0\6\146"+
    "\2\0\4\146\1\0\2\146\1\0\2\146\1\41\21\146"+
    "\2\0\1\41\4\146\5\0\1\35\1\0\2\6\1\164"+
    "\3\6\2\0\4\6\1\0\2\6\1\0\2\6\1\41"+
    "\21\6\1\42\1\0\1\41\1\6\1\26\1\27\1\30"+
    "\7\0\6\146\2\0\4\146\1\0\2\146\1\0\2\146"+
    "\1\0\21\146\3\0\4\146\5\0\1\35\1\0\6\6"+
    "\2\0\4\6\1\0\2\6\1\0\2\6\1\41\2\6"+
    "\1\165\16\6\1\42\1\0\1\41\1\6\1\26\1\27"+
    "\1\30\5\0\1\35\1\0\6\6\2\0\4\6\1\0"+
    "\2\6\1\0\2\6\1\41\10\6\1\166\10\6\1\42"+
    "\1\0\1\41\1\6\1\26\1\27\1\30\5\0\1\35"+
    "\1\0\6\6\2\0\4\6\1\0\2\6\1\0\2\6"+
    "\1\167\21\6\1\42\1\0\1\41\1\6\1\26\1\27"+
    "\1\30\5\0\1\35\1\0\6\6\2\0\4\6\1\0"+
    "\2\6\1\0\2\6\1\41\3\6\1\170\15\6\1\42"+
    "\1\0\1\41\1\6\1\26\1\27\1\30\5\0\1\35"+
    "\1\0\6\6\2\0\4\6\1\0\2\6\1\0\1\6"+
    "\1\171\1\41\21\6\1\42\1\0\1\41\1\6\1\26"+
    "\1\27\1\30\5\0\1\35\1\0\6\6\2\0\4\6"+
    "\1\0\2\6\1\0\2\6\1\41\1\6\1\172\17\6"+
    "\1\42\1\0\1\41\1\6\1\26\1\27\1\30\5\0"+
    "\1\35\1\0\6\6\2\0\4\6\1\0\2\6\1\0"+
    "\2\6\1\41\10\6\1\173\10\6\1\42\1\0\1\41"+
    "\1\6\1\26\1\27\1\30\7\0\6\161\2\0\4\161"+
    "\1\0\2\161\1\0\2\161\1\0\21\161\1\133\1\134"+
    "\1\0\1\161\1\0\1\161\2\0\1\135\2\136\3\0"+
    "\1\75\1\76\2\75\1\77\1\75\2\100\1\101\1\75"+
    "\1\102\1\75\1\103\2\75\1\104\2\75\1\0\21\75"+
    "\1\0\1\134\1\0\1\75\1\105\1\75\1\105\1\0"+
    "\1\135\1\163\1\136\3\0\1\75\1\76\2\75\1\77"+
    "\1\75\2\100\1\101\1\75\1\102\1\75\1\103\2\75"+
    "\1\104\2\75\1\0\21\75\1\0\1\134\1\0\1\75"+
    "\1\105\1\75\1\105\1\0\1\135\2\136\1\0\1\35"+
    "\1\0\6\6\2\0\4\6\1\0\2\6\1\0\2\6"+
    "\1\41\3\6\1\174\15\6\1\42\1\0\1\41\1\6"+
    "\1\26\1\27\1\30\5\0\1\35\1\0\6\6\2\0"+
    "\4\6\1\0\2\6\1\0\2\6\1\41\11\6\1\175"+
    "\7\6\1\42\1\0\1\41\1\6\1\26\1\27\1\30"+
    "\5\0\1\35\1\0\6\6\2\0\2\6\1\176\1\6"+
    "\1\0\2\6\1\0\2\6\1\41\21\6\1\42\1\0"+
    "\1\41\1\6\1\26\1\27\1\30\7\0\6\41\2\0"+
    "\4\41\1\0\2\41\1\0\1\41\1\177\1\0\21\41"+
    "\3\0\1\41\2\111\6\0\1\35\1\0\3\6\1\200"+
    "\2\6\2\0\4\6\1\0\2\6\1\0\2\6\1\41"+
    "\21\6\1\42\1\0\1\41\1\6\1\26\1\27\1\30"+
    "\5\0\1\35\1\0\6\6\2\0\4\6\1\0\2\6"+
    "\1\0\2\6\1\41\3\6\1\201\15\6\1\42\1\0"+
    "\1\41\1\6\1\26\1\27\1\30\5\0\1\35\1\0"+
    "\6\6\2\0\4\6\1\0\2\6\1\0\2\6\1\41"+
    "\15\6\1\202\3\6\1\42\1\0\1\41\1\6\1\26"+
    "\1\27\1\30\5\0\1\35\1\0\6\6\2\0\4\6"+
    "\1\0\2\6\1\0\2\6\1\41\3\6\1\203\15\6"+
    "\1\42\1\0\1\41\1\6\1\26\1\27\1\30\5\0"+
    "\1\35\1\0\6\6\2\0\4\6\1\0\2\6\1\0"+
    "\2\6\1\41\6\6\1\204\12\6\1\42\1\0\1\41"+
    "\1\6\1\26\1\27\1\30\5\0\1\35\1\0\6\6"+
    "\2\0\4\6\1\0\1\205\1\6\1\0\2\6\1\41"+
    "\21\6\1\42\1\0\1\41\1\6\1\26\1\27\1\30"+
    "\5\0\1\35\1\0\2\6\1\206\3\6\2\0\4\6"+
    "\1\0\2\6\1\0\2\6\1\41\21\6\1\42\1\0"+
    "\1\41\1\6\1\26\1\27\1\30\7\0\6\41\2\0"+
    "\4\41\1\0\2\41\1\0\2\41\1\0\1\207\20\41"+
    "\3\0\1\41\2\111\6\0\1\35\1\0\6\6\2\0"+
    "\4\6\1\0\2\6\1\0\2\6\1\41\5\6\1\210"+
    "\13\6\1\42\1\0\1\41\1\6\1\26\1\27\1\30"+
    "\5\0\1\35\1\0\3\6\1\211\2\6\2\0\4\6"+
    "\1\0\2\6\1\0\2\6\1\41\21\6\1\42\1\0"+
    "\1\41\1\6\1\26\1\27\1\30\5\0\1\35\1\0"+
    "\1\6\1\212\4\6\2\0\4\6\1\0\2\6\1\0"+
    "\2\6\1\41\21\6\1\42\1\0\1\41\1\6\1\26"+
    "\1\27\1\30\5\0\1\35\1\0\6\6\2\0\4\6"+
    "\1\0\2\6\1\0\2\6\1\41\14\6\1\166\4\6"+
    "\1\42\1\0\1\41\1\6\1\26\1\27\1\30\5\0"+
    "\1\35\1\0\6\6\2\0\4\6\1\0\2\6\1\0"+
    "\1\6\1\213\1\41\21\6\1\42\1\0\1\41\1\6"+
    "\1\26\1\27\1\30\5\0\1\35\1\0\6\6\2\0"+
    "\4\6\1\0\2\6\1\0\2\6\1\41\3\6\1\214"+
    "\15\6\1\42\1\0\1\41\1\6\1\26\1\27\1\30"+
    "\5\0\1\35\1\0\6\6\2\0\4\6\1\0\2\6"+
    "\1\0\2\6\1\41\3\6\1\215\15\6\1\42\1\0"+
    "\1\41\1\6\1\26\1\27\1\30\7\0\6\41\2\0"+
    "\4\41\1\0\2\41\1\0\2\41\1\0\1\41\1\216"+
    "\17\41\3\0\1\41\2\111\6\0\1\35\1\0\6\6"+
    "\2\0\4\6\1\0\2\6\1\0\2\6\1\41\21\6"+
    "\1\42\1\0\1\41\1\6\1\26\1\27\1\30\1\0"+
    "\1\217\2\220\1\0\1\35\1\0\6\6\2\0\4\6"+
    "\1\0\2\6\1\0\2\6\1\221\21\6\1\42\1\0"+
    "\1\41\1\6\1\26\1\27\1\30\5\0\1\35\1\0"+
    "\6\6\2\0\4\6\1\0\1\222\1\6\1\0\2\6"+
    "\1\41\21\6\1\42\1\0\1\41\1\6\1\26\1\27"+
    "\1\30\5\0\1\35\1\0\6\6\2\0\4\6\1\0"+
    "\2\6\1\0\2\6\1\223\21\6\1\42\1\0\1\41"+
    "\1\6\1\26\1\27\1\30\5\0\1\35\1\0\6\6"+
    "\2\0\4\6\1\0\2\6\1\0\2\6\1\41\1\6"+
    "\1\176\17\6\1\42\1\0\1\41\1\6\1\26\1\27"+
    "\1\30\5\0\1\35\1\0\1\6\1\224\4\6\2\0"+
    "\4\6\1\0\2\6\1\0\2\6\1\41\21\6\1\42"+
    "\1\0\1\41\1\6\1\26\1\27\1\30\7\0\6\41"+
    "\2\0\4\41\1\0\1\225\1\41\1\0\2\41\1\0"+
    "\21\41\3\0\1\41\2\111\65\0\1\220\4\0\6\41"+
    "\2\0\4\41\1\0\2\41\1\0\2\41\1\0\11\41"+
    "\1\226\7\41\3\0\1\41\2\111\6\0\1\35\1\0"+
    "\6\6\2\0\4\6\1\0\2\6\1\0\2\6\1\41"+
    "\16\6\1\153\2\6\1\42\1\0\1\41\1\6\1\26"+
    "\1\27\1\30\7\0\6\41\2\0\4\41\1\0\1\227"+
    "\1\41\1\0\2\41\1\0\21\41\3\0\1\41\2\111"+
    "\6\0\1\35\1\0\3\6\1\210\2\6\2\0\4\6"+
    "\1\0\2\6\1\0\2\6\1\41\21\6\1\42\1\0"+
    "\1\41\1\6\1\26\1\27\1\30\7\0\6\41\2\0"+
    "\4\41\1\0\2\41\1\0\1\41\1\230\1\0\21\41"+
    "\3\0\1\41\2\111\10\0\6\41\2\0\2\41\1\231"+
    "\1\41\1\0\2\41\1\0\2\41\1\0\21\41\3\0"+
    "\1\41\2\111\10\0\6\41\2\0\4\41\1\0\2\41"+
    "\1\0\1\41\1\232\1\0\21\41\3\0\1\41\2\111"+
    "\10\0\6\41\2\0\4\41\1\0\2\41\1\0\2\41"+
    "\1\0\2\41\1\233\16\41\3\0\1\41\2\111\10\0"+
    "\2\41\1\234\3\41\2\0\4\41\1\0\2\41\1\0"+
    "\2\41\1\0\21\41\3\0\1\41\2\111\10\0\6\41"+
    "\2\0\4\41\1\0\2\41\1\0\2\41\1\0\5\41"+
    "\1\235\13\41\3\0\1\41\2\111\10\0\6\41\2\0"+
    "\4\41\1\0\2\41\1\0\2\41\1\0\2\41\1\236"+
    "\16\41\3\0\1\41\2\111\10\0\6\41\2\0\2\41"+
    "\1\237\1\41\1\0\2\41\1\0\2\41\1\0\21\41"+
    "\3\0\1\41\2\111\10\0\6\41\2\0\4\41\1\0"+
    "\2\41\1\0\2\41\1\0\7\41\1\240\11\41\3\0"+
    "\1\41\2\111\10\0\6\41\2\0\4\41\1\0\2\41"+
    "\1\0\2\41\1\0\3\41\1\241\15\41\3\0\1\41"+
    "\2\111\10\0\6\41\2\0\4\41\1\0\2\41\1\0"+
    "\2\41\1\0\17\41\1\242\1\41\3\0\1\41\2\111"+
    "\10\0\6\41\2\0\4\41\1\0\2\41\1\0\2\41"+
    "\1\0\10\41\1\243\10\41\3\0\1\41\2\111\10\0"+
    "\1\41\1\244\4\41\2\0\4\41\1\0\2\41\1\0"+
    "\2\41\1\0\21\41\3\0\1\41\2\111\10\0\1\41"+
    "\1\245\4\41\2\0\4\41\1\0\2\41\1\0\2\41"+
    "\1\0\21\41\3\0\1\41\2\111\10\0\6\41\2\0"+
    "\2\41\1\246\1\41\1\0\2\41\1\0\2\41\1\0"+
    "\21\41\3\0\1\41\2\111\10\0\3\41\1\247\2\41"+
    "\2\0\4\41\1\0\2\41\1\0\2\41\1\0\21\41"+
    "\3\0\1\41\2\111\10\0\6\41\2\0\4\41\1\0"+
    "\2\41\1\0\2\41\1\0\10\41\1\250\10\41\3\0"+
    "\1\41\2\111\10\0\2\41\1\236\3\41\2\0\4\41"+
    "\1\0\2\41\1\0\2\41\1\0\21\41\3\0\1\41"+
    "\2\111\10\0\6\41\2\0\4\41\1\0\2\41\1\0"+
    "\2\41\1\0\21\41\3\0\1\41\2\111\2\0\1\217"+
    "\2\220\3\0\6\41\2\0\4\41\1\0\2\41\1\0"+
    "\2\41\1\0\3\41\1\251\15\41\3\0\1\41\2\111"+
    "\10\0\6\41\2\0\4\41\1\0\2\41\1\0\2\41"+
    "\1\0\2\41\1\252\16\41\3\0\1\41\2\111\10\0"+
    "\6\41\2\0\4\41\1\0\2\41\1\0\2\41\1\0"+
    "\20\41\1\247\3\0\1\41\2\111\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7950];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\16\1\1\11\1\1\1\11"+
    "\5\1\2\0\2\1\1\11\6\0\4\1\1\11\1\0"+
    "\2\1\1\11\1\0\7\1\12\0\5\1\2\0\1\11"+
    "\2\0\1\1\1\0\1\1\1\0\6\1\1\0\1\11"+
    "\7\0\4\1\1\0\1\1\1\11\6\1\3\0\3\1"+
    "\1\0\7\1\1\0\7\1\1\0\6\1\1\0\1\1"+
    "\1\11\1\0\1\1\1\0\1\1\26\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

/** 
sym is another auto generated class, created by CUP (parser generator)
*/
public static final int ALPHANUM          = QueryTokenizer.ALPHANUM;
public static final int APOSTROPHE        = QueryTokenizer.APOSTROPHE;
public static final int NUM               = QueryTokenizer.NUM;
public static final int CJ                = QueryTokenizer.CJ;
public static final int PHRASE            = QueryTokenizer.PHRASE;
public static final int LEFT_PARENTHESIS  = QueryTokenizer.LEFT_PARENTHESIS;
public static final int RIGHT_PARENTHESIS = QueryTokenizer.RIGHT_PARENTHESIS;
public static final int AND		  		  = QueryTokenizer.AND;
public static final int OR		  		  = QueryTokenizer.OR;
public static final int NOT 			  = QueryTokenizer.NOT;
public static final int RELATION		  = QueryTokenizer.RELATION;


public static final String [] TOKEN_TYPES = QueryTokenizer.TOKEN_TYPES;

public final int yychar()
{
    return yychar;
}

/**
 * Fills a Lucene token with the current token text.
 */
final void getText(CharTermAttribute termAtt) {
	termAtt.setEmpty();
	termAtt.append(new String(zzBuffer), zzStartRead, zzMarkedPos);
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  QueryTokenizerImpl(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  QueryTokenizerImpl(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 246) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { yypushback(1); return new Symbol(OR);
          }
        case 17: break;
        case 15: 
          { yypushback(3); return new Symbol(RIGHT_PARENTHESIS);
          }
        case 18: break;
        case 9: 
          { yypushback(1); return new Symbol(AND);
          }
        case 19: break;
        case 12: 
          { return new Symbol(APOSTROPHE, yytext());
          }
        case 20: break;
        case 3: 
          { return new Symbol(ALPHANUM, yytext());
          }
        case 21: break;
        case 13: 
          { yypushback(2); return new Symbol(RIGHT_PARENTHESIS);
          }
        case 22: break;
        case 6: 
          { return new Symbol(CJ, yytext());
          }
        case 23: break;
        case 7: 
          { yypushback(1); return new Symbol(NOT);
          }
        case 24: break;
        case 16: 
          { yypushback(1); return new Symbol(RELATION, yytext());
          }
        case 25: break;
        case 2: 
          { return new Symbol(NOT);
          }
        case 26: break;
        case 1: 
          { /* ignore */
          }
        case 27: break;
        case 14: 
          { return new Symbol(PHRASE, yytext());
          }
        case 28: break;
        case 5: 
          { return new Symbol(RIGHT_PARENTHESIS);
          }
        case 29: break;
        case 8: 
          { yypushback(1); return new Symbol(RIGHT_PARENTHESIS);
          }
        case 30: break;
        case 4: 
          { return new Symbol(LEFT_PARENTHESIS);
          }
        case 31: break;
        case 11: 
          { return new Symbol(NUM, yytext());
          }
        case 32: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
