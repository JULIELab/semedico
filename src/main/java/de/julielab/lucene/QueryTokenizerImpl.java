/* The following code was generated by JFlex 1.4.3 on 09.08.11 13:56 */

package de.julielab.lucene;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 _       __                 _             __
| |     / /___ __________  (_)___  ____ _/ /
| | /| / / __ `/ ___/ __ \/ / __ \/ __ `/ / 
| |/ |/ / /_/ / /  / / / / / / / / /_/ /_/  
|__/|__/\__,_/_/  /_/ /_/_/_/ /_/\__, (_)   
                                /____/      

The following code is auto generated.
Please change the .lex file and run jflex if you want to change it!
*/
import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 09.08.11 13:56 from the specification file
 * <tt>/home/hellrich/workspace/semedico-core2/src/main/java/de/julielab/lucene/QueryTokenizerImpl.lex</tt>
 */
class QueryTokenizerImpl {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\30\1\27\1\0\1\30\1\26\22\0\1\30\1\0\1\17"+
    "\3\0\1\11\1\16\1\1\1\2\2\0\1\20\1\15\1\20\1\20"+
    "\12\22\7\0\1\3\2\21\1\10\11\21\1\7\1\12\2\21\1\13"+
    "\10\21\4\0\1\20\1\0\1\6\2\21\1\5\11\21\1\4\14\21"+
    "\1\0\1\14\103\0\27\21\1\0\37\21\1\0\u0568\21\12\23\206\21"+
    "\12\23\u026c\21\12\23\166\21\12\23\166\21\12\23\166\21\12\23\166\21"+
    "\12\23\167\21\11\23\166\21\12\23\166\21\12\23\166\21\12\23\340\21"+
    "\12\23\166\21\12\23\u0166\21\12\23\266\21\u0100\21\u0e00\21\u1040\0\u0150\25"+
    "\140\0\20\25\u0100\0\200\25\200\0\u19c0\25\100\0\u5200\25\u0c00\0\u2bb0\24"+
    "\u2150\0\u0200\25\u0465\0\73\25\75\21\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\3\4\1\1\1\4\1\1"+
    "\1\4\1\1\2\4\1\5\1\1\1\0\1\6\1\0"+
    "\1\7\3\4\2\0\1\10\1\0\1\10\1\4\1\11"+
    "\1\0\1\11\12\0\1\7\2\4\1\12\1\13\1\14"+
    "\7\0\3\13\1\6\4\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[63];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\31\0\31\0\62\0\113\0\144\0\175\0\226"+
    "\0\257\0\310\0\341\0\372\0\u0113\0\u012c\0\31\0\u0145"+
    "\0\u015e\0\u0177\0\u0190\0\u01a9\0\u01c2\0\u01db\0\u01f4\0\u020d"+
    "\0\u0226\0\31\0\226\0\u023f\0\u0258\0\31\0\310\0\u0271"+
    "\0\u028a\0\u02a3\0\u02bc\0\u02d5\0\u02ee\0\u0307\0\u0320\0\u0339"+
    "\0\u0352\0\u036b\0\31\0\u0384\0\u039d\0\u03b6\0\u03cf\0\31"+
    "\0\u03e8\0\372\0\u0401\0\u041a\0\u0433\0\u044c\0\u0465\0\u047e"+
    "\0\u0497\0\u04b0\0\31\0\u04c9\0\u04e2\0\u04fb\0\u0514";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[63];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\7\2\6\1\10"+
    "\1\11\1\6\1\12\1\13\1\2\1\14\1\2\1\6"+
    "\1\15\1\16\1\13\1\17\1\20\2\2\34\0\1\21"+
    "\5\0\1\22\1\23\1\0\1\24\17\0\1\6\1\25"+
    "\2\6\1\26\1\6\1\0\2\6\1\0\1\27\1\30"+
    "\1\0\1\31\1\6\1\15\1\16\1\13\7\0\6\6"+
    "\1\0\2\6\1\0\1\27\1\30\1\0\1\31\1\6"+
    "\1\15\1\16\1\13\7\0\1\6\1\25\4\6\1\0"+
    "\2\6\1\0\1\27\1\30\1\0\1\31\1\6\1\15"+
    "\1\16\1\13\5\0\1\32\7\0\1\33\14\0\1\34"+
    "\2\32\3\0\6\6\1\0\1\6\1\35\1\0\1\27"+
    "\1\30\1\0\1\31\1\6\1\15\1\16\1\13\5\0"+
    "\1\36\12\0\1\37\11\0\1\40\2\36\3\0\6\13"+
    "\1\0\2\13\1\0\1\27\2\0\1\31\4\13\5\0"+
    "\2\41\1\42\2\43\1\44\2\43\1\45\1\46\1\43"+
    "\1\47\1\50\3\0\1\43\1\50\1\43\1\50\7\0"+
    "\6\15\1\0\2\15\1\0\1\27\2\0\1\51\3\15"+
    "\1\13\7\0\6\16\1\0\2\16\1\0\1\27\1\30"+
    "\1\0\1\51\1\16\1\15\1\16\1\13\33\0\1\2"+
    "\10\0\1\52\32\0\1\22\32\0\1\53\31\0\1\24"+
    "\17\0\2\6\1\54\3\6\1\0\2\6\1\0\1\27"+
    "\1\30\1\0\1\31\1\6\1\15\1\16\1\13\7\0"+
    "\5\6\1\55\1\0\2\6\1\0\1\27\1\30\1\0"+
    "\1\31\1\6\1\15\1\16\1\13\7\0\6\27\1\0"+
    "\2\27\1\0\1\27\2\0\1\31\1\27\2\15\1\13"+
    "\7\0\6\56\1\0\2\56\5\0\1\56\1\0\1\56"+
    "\10\0\6\31\1\0\2\31\5\0\1\31\2\57\34\0"+
    "\1\32\2\0\1\36\1\0\6\6\1\0\2\6\1\0"+
    "\1\27\1\30\1\0\1\31\1\6\1\15\1\16\1\13"+
    "\1\0\1\40\2\36\27\0\1\36\20\0\1\60\6\0"+
    "\1\61\2\62\3\0\1\43\1\63\2\43\1\64\1\43"+
    "\1\0\2\43\1\0\1\50\1\65\1\60\1\0\1\43"+
    "\1\50\1\43\1\50\1\0\1\61\2\62\3\0\6\43"+
    "\1\0\2\43\1\0\1\50\1\65\1\60\1\0\1\43"+
    "\1\50\1\43\1\50\1\0\1\61\2\62\3\0\1\43"+
    "\1\63\4\43\1\0\2\43\1\0\1\50\1\65\1\60"+
    "\1\0\1\43\1\50\1\43\1\50\1\0\1\61\2\62"+
    "\11\0\1\45\14\0\1\66\2\41\3\0\6\43\1\0"+
    "\1\43\1\67\1\0\1\50\1\65\1\60\1\0\1\43"+
    "\1\50\1\43\1\50\1\0\1\61\2\62\14\0\1\47"+
    "\11\0\1\66\2\41\3\0\6\50\1\0\2\50\1\0"+
    "\1\50\1\0\1\60\1\0\4\50\1\0\1\61\2\62"+
    "\3\0\6\70\1\0\2\70\1\0\1\71\3\0\1\70"+
    "\2\72\1\71\14\0\1\73\23\0\6\6\1\0\2\6"+
    "\1\0\1\27\1\30\1\0\1\31\1\6\1\15\1\16"+
    "\1\13\1\0\1\34\2\32\1\0\1\32\1\0\6\6"+
    "\1\0\2\6\1\0\1\27\1\30\1\0\1\31\1\6"+
    "\1\15\1\16\1\13\1\0\1\34\2\32\3\0\6\56"+
    "\1\0\2\56\2\0\1\30\2\0\1\56\1\0\1\56"+
    "\10\0\6\57\1\0\2\57\1\0\1\74\2\0\1\74"+
    "\3\57\6\0\2\41\1\42\2\43\1\44\2\43\1\45"+
    "\1\46\1\43\1\47\1\50\3\0\1\43\1\50\1\43"+
    "\1\50\2\0\1\62\4\0\2\43\1\67\3\43\1\0"+
    "\2\43\1\0\1\50\1\65\1\60\1\0\1\43\1\50"+
    "\1\43\1\50\1\0\1\61\2\62\3\0\5\43\1\67"+
    "\1\0\2\43\1\0\1\50\1\65\1\60\1\0\1\43"+
    "\1\50\1\43\1\50\1\0\1\61\2\62\3\0\6\75"+
    "\1\0\2\75\5\0\1\75\1\0\1\75\24\0\1\60"+
    "\6\0\1\61\1\76\1\62\3\0\6\43\1\0\2\43"+
    "\1\0\1\50\1\65\1\60\1\0\1\43\1\50\1\43"+
    "\1\50\1\0\1\77\2\76\3\0\6\70\1\0\2\70"+
    "\1\0\1\70\2\0\1\31\1\70\2\72\1\71\7\0"+
    "\6\71\1\0\2\71\1\0\1\70\2\0\1\31\4\71"+
    "\7\0\6\72\1\0\2\72\1\0\1\70\2\0\1\51"+
    "\3\72\1\71\7\0\6\71\1\0\2\71\1\0\1\71"+
    "\3\0\4\71\7\0\6\75\1\0\2\75\2\0\1\65"+
    "\1\60\1\0\1\75\1\0\1\75\2\0\1\61\2\62"+
    "\1\0\2\41\1\42\2\43\1\44\2\43\1\45\1\46"+
    "\1\43\1\47\1\50\1\0\1\60\1\0\1\43\1\50"+
    "\1\43\1\50\1\0\1\61\2\62\1\0\2\41\1\42"+
    "\2\43\1\44\2\43\1\45\1\46\1\43\1\47\1\50"+
    "\1\0\1\60\1\0\1\43\1\50\1\43\1\50\1\0"+
    "\1\61\1\76\1\62";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1325];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\13\1\1\11\1\1\1\0\1\1\1\0"+
    "\4\1\2\0\1\11\1\0\2\1\1\11\1\0\1\1"+
    "\12\0\1\11\4\1\1\11\7\0\3\1\1\11\4\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[63];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

/** 
sym is another auto generated class, created by CUP (parser generator)
*/
public static final int ALPHANUM          = QueryTokenizer.ALPHANUM;
public static final int APOSTROPHE        = QueryTokenizer.APOSTROPHE;
public static final int NUM               = QueryTokenizer.NUM;
public static final int CJ                = QueryTokenizer.CJ;
public static final int PHRASE            = QueryTokenizer.PHRASE;
public static final int LEFT_PARENTHESIS  = QueryTokenizer.LEFT_PARENTHESIS;
public static final int RIGHT_PARENTHESIS = QueryTokenizer.RIGHT_PARENTHESIS;
public static final int AND		  		  = QueryTokenizer.AND;
public static final int OR		  		  = QueryTokenizer.OR;


public static final String [] TOKEN_TYPES = QueryTokenizer.TOKEN_TYPES;

public final int yychar()
{
    return yychar;
}

/**
 * Fills a Lucene token with the current token text.
 */
final void getText(CharTermAttribute termAtt) {
	termAtt.setEmpty();
	termAtt.append(new String(zzBuffer), zzStartRead, zzMarkedPos);
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  QueryTokenizerImpl(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  QueryTokenizerImpl(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { yypushback(1); return new Symbol(OR);
          }
        case 13: break;
        case 8: 
          { yypushback(1); return new Symbol(AND);
          }
        case 14: break;
        case 6: 
          { yypushback(3); return new Symbol(RIGHT_PARENTHESIS);
          }
        case 15: break;
        case 10: 
          { return new Symbol(APOSTROPHE, yytext());
          }
        case 16: break;
        case 4: 
          { return new Symbol(ALPHANUM, yytext());
          }
        case 17: break;
        case 5: 
          { return new Symbol(CJ, yytext());
          }
        case 18: break;
        case 7: 
          { yypushback(2); return new Symbol(RIGHT_PARENTHESIS);
          }
        case 19: break;
        case 1: 
          { /* ignore */
          }
        case 20: break;
        case 12: 
          { return new Symbol(PHRASE, yytext());
          }
        case 21: break;
        case 3: 
          { return new Symbol(RIGHT_PARENTHESIS);
          }
        case 22: break;
        case 2: 
          { return new Symbol(LEFT_PARENTHESIS);
          }
        case 23: break;
        case 11: 
          { return new Symbol(NUM, yytext());
          }
        case 24: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
