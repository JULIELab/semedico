package de.julielab.semedico.mesh.exchange;

import de.julielab.semedico.mesh.Tree;
import de.julielab.semedico.mesh.modifications.DescAdditions;
import org.slf4j.Logger;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.XMLReaderFactory;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import java.io.*;
import java.util.zip.GZIPInputStream;

/**
 * This class deals with importing data for into a <code>Tree</code> object from various sources:
 * <ul>
 * <li>MeSH XML</li>
 * <li>UD-XML (data generated by previously used algorithm to create semedico-MeSH</li>
 * <li>Own XML (adaption of MeSH-XML)</li>
 * <li>more to come ...</li>
 * </ul>
 * 
 * @author Philipp Lucas
 */
public class DataImporter {

	private static Logger logger = org.slf4j.LoggerFactory.getLogger(DataImporter.class);

	/**
	 * Imports descriptors following the MeSH XML syntax from a file. Previous content of data will not be overwritten.
	 * 
	 * @param xmlFilepath
	 *            Path to XML file.
	 * @param data
	 *            Tree instance to import data to.
	 * @throws Exception
	 */
	public static void fromOriginalMeshXml(String xmlFilepath, Tree data) throws Exception {
		fromOriginalMeshXml(xmlFilepath, data, false);
	}
	
	public static void fromOriginalMeshXml(String xmlFilepath, Tree data, boolean createMeshFacets) throws Exception {
		logger.info("# Importing descriptor records from MeSH XML file '{}' ... ", xmlFilepath);

		try (InputStream is = (xmlFilepath.endsWith("gz") || xmlFilepath.endsWith("gzip"))
				?new GZIPInputStream(new FileInputStream(new File(xmlFilepath)))
				:new FileInputStream(new File(xmlFilepath))) {
			SAXParserFactory factory = SAXParserFactory.newInstance();
			factory.setValidating(false);
			factory.setNamespaceAware(true);

			SAXParser parser = factory.newSAXParser();
			XMLReader xmlReader = parser.getXMLReader();

			InputSource inputSource = new InputSource(is);
			inputSource.setSystemId(new File(xmlFilepath).getCanonicalPath()); // to resolve relative dtd file in xml
																				// file

			Parser4Mesh saxHandler = new Parser4Mesh(data, createMeshFacets);
			xmlReader.setContentHandler(saxHandler);

			xmlReader.parse(inputSource);

		} catch (ParserConfigurationException | SAXException | IOException e) {
			logger.error(e.getMessage());
			throw e;
		}
		logger.info("# ... done.");
	}

	/**
	 * Imports MeSH Supplementary Concept Records following the appropriate XML syntax from a file. Previous content of
	 * data will not be overwritten.
	 * 
	 * @param xmlFilepath
	 *            Path to XML file.
	 * @param data
	 *            Tree instance to import data to.
	 * @throws Exception
	 */
	public static void fromSupplementaryConceptsXml(String xmlFilepath, Tree data) throws Exception {
		logger.info("# Importing descriptor records from MeSH XML file '{}' ... ", xmlFilepath);

		try (InputStream is = (xmlFilepath.endsWith("gz") || xmlFilepath.endsWith("gzip"))
				? new GZIPInputStream(new FileInputStream(new File(xmlFilepath)))
				: new FileInputStream(new File(xmlFilepath))) {
			SAXParserFactory factory = SAXParserFactory.newInstance();
			factory.setValidating(false);
			factory.setNamespaceAware(true);

			SAXParser parser = factory.newSAXParser();
			XMLReader xmlReader = parser.getXMLReader();

			InputSource inputSource = new InputSource(is);
			inputSource.setSystemId(new File(xmlFilepath).getCanonicalPath()); // to resolve relative dtd file in xml
																				// file

			Parser4SupplementaryConcepts saxHandler = new Parser4SupplementaryConcepts(data);
			xmlReader.setContentHandler(saxHandler);

			xmlReader.parse(inputSource);

		} catch (ParserConfigurationException | SAXException | IOException e) {
			logger.error(e.getMessage());
			throw e;
		}
		logger.info("# ... done.");
	}

	/**
	 * <p>
	 * Imports descriptors following the user defined MeSH XML syntax from a file. Previous content of data will not be
	 * overwritten. 'user defined' in this context refers to the XML format that was previously used as an intermediate
	 * format for importing MeSH data into the semedico DBMS.
	 * </p>
	 * 
	 * @param xmlDirPath
	 *            Path to directory with XML files. Each file refers to a named 'facet' (see XML), and each such facet
	 *            is represented by a descriptor with one tree vertex. Hence, all tree vertices of that file are (not
	 *            necessarily direct) children of this 'facet tree vertex'.
	 * @param newData
	 *            Tree instance to import data to.
	 * @throws IOException
	 * @throws SAXException
	 */
	public static void fromUserDefinedMeshXml(String xmlDirPath, Tree newData) throws IOException, SAXException {

		logger.info("# Importing 'user defined' descriptor records from directory '{}' ... ", xmlDirPath);

		File dir = new File(xmlDirPath);
		if (!dir.isDirectory()) {
			logger.error("The path '{}' does not point at a directory. Aborting.", xmlDirPath);
			System.exit(1);
		}

		// read in data from all XML files in the directory xmlFilepath
		for (File xmlFile : dir.listFiles()) {
//			if (!xmlFile.getName().contains("symptoms")) {
//				System.out.println("Excluding file " + xmlFile + " in DAtaImporter");
//				continue;
//			}

				if (".".equals(xmlFile.getName()) || "..".equals(xmlFile.getName())) {
					continue; // Ignore the self and parent aliases.
				}

				logger.info("# Importing 'user defined' descriptor records from XML file '" + xmlFile.getPath()
						+ "' ... ");

				try (InputStream is = (xmlFile.getName().endsWith("gz") || xmlFile.getName().endsWith("gzip"))
						? new GZIPInputStream(new FileInputStream(xmlFile))
						: new FileInputStream(xmlFile)) {
					XMLReader xmlReader = XMLReaderFactory.createXMLReader();
					InputSource inputSource = new InputSource(is);

					Parser4UserDefMesh saxHandler = new Parser4UserDefMesh(newData, xmlFile.getName());
					xmlReader.setContentHandler(saxHandler);

					xmlReader.parse(inputSource);
			} catch (FileNotFoundException e) {
				logger.error(e.getMessage());
				throw e;
			} catch (IOException e) {
				logger.error(e.getMessage());
				throw e;
			} catch (SAXException e) {
				logger.error(e.getMessage());
				throw e;
			}
		}

		logger.info("# ... done with directory '{}'.", xmlDirPath);
	}

	/**
	 * Imports descriptors following a file with the the "OwnXML" format.
	 * 
	 * @param xmlFilepath
	 *            Path to XML file.
	 * @return Returns the imported descriptors.
	 */
	public static DescAdditions fromOwnXML(String xmlFilepath) {
		logger.info("# Importing descriptor records from MeSH XML file '{}' ... ", xmlFilepath);
		DescAdditions newDescs = null;
		try {

			XMLReader xmlReader = XMLReaderFactory.createXMLReader();
			FileReader reader = new FileReader(xmlFilepath);
			InputSource inputSource = new InputSource(reader);

			Parser4OwnMesh saxHandler = new Parser4OwnMesh();
			xmlReader.setContentHandler(saxHandler);

			xmlReader.parse(inputSource);

			newDescs = saxHandler.getNewDescriptors();

		} catch (FileNotFoundException e) {
			logger.error(e.getMessage());
		} catch (IOException e) {
			logger.error(e.getMessage());
		} catch (SAXException e) {
			logger.error(e.getMessage());
		}
		logger.info("# ... done.");
		return newDescs;
	}

}
